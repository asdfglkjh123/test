{"version":3,"sources":["assets/StaxLogoOnly.png","views/utilities/staxlogo.js","views/utilities/StakingCard.js","views/utilities/Typography.js"],"names":["StaxLogo","useTheme","Grid","justifyContent","alignContent","sx","height","width","src","Stax","alt","style","position","top","left","transform","bgcolor","border","boxShadow","borderRadius","borderColor","p","StakingCard","theme","useState","balance","setBalance","balanceFormatted","BigNumber","decimalPlaces","toLocaleString","undefined","stakeAmount","setStakeAmount","stakeName","setStakeName","Number18Decimals","stakeAmountFormatted","Web3","utils","toWei","toString","stakeAFormatted","toBN","sharesBalance","setSharesBalance","stakesList","setStakesList","withdrawSum","setWithdrawSum","withdrawSumFormatted","withdrawAFormatted","stakedd","React","loading","setLoading","open","setOpen","open2","setOpen2","open3","setOpen3","open4","setOpen4","handleClose3","handleClose4","currentIndex","setCurrentIndex","myAPY","fetchStaxBalance","a","ggetStaxBalance","then","catch","err","console","log","fetchStakesBalance","stakeHas","balancee","fetchSharesBalance","ggetOwnBalance","useEffect","load","Modal","onClose","Box","variant","textAlign","component","Button","onClick","withdrawAmount","mt","fontSize","color","palette","grey","backgroundColor","success","main","TextField","required","borderBottom","ml","onChange","e","target","value","inputProps","id","item","display","LoadingButton","stakeStax","container","spacing","xs","lg","md","sm","Divider","Card","maxWidth","borderLeft","borderRight","light","pt","Tooltip","title","my","type","mb","minHeight","minWidth","cotainer","Paper","overflow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","map","total","index","stakename","sharesbonus","amount","maximumFractionDigits","claimable","dateSeparator","format","showTime","since","Typography","gridSpacing"],"mappings":"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","file":"static/js/12.4d8310d1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/StaxLogoOnly.17f6a5b9.png\";","// project imports\nimport Stax from '../../assets/StaxLogoOnly.png';\nimport { Grid } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nconst StaxLogo = () => {\n    useTheme();\n    return (\n        <>\n            <Grid justifyContent=\"center\" alignContent=\"center\" sx={{ height: 100 }}>\n                <img height={80} width=\"height\" src={Stax} alt=\"shares banner\" />\n            </Grid>\n        </>\n    );\n};\n\nexport default StaxLogo;\n","import React, { useState, useEffect } from 'react';\n\n// material-ui\nimport SimpleDateTime from 'react-simple-timestamp-to-date';\nimport { useTheme } from '@mui/material/styles';\nimport {\n    Button,\n    Box,\n    Card,\n    Divider,\n    Grid,\n    Table,\n    Paper,\n    TableContainer,\n    TextField,\n    Tooltip,\n    TableHead,\n    Typography,\n    TableBody,\n    TableRow,\n    TableCell,\n    Modal\n} from '@mui/material';\n// project imports\nimport StaxLogo from './staxlogo';\nimport DoneIcon from '@mui/icons-material/Done';\nimport InfoIcon from '@mui/icons-material/Info';\nimport { ggetStaxBalance, withdrawAmount, ggetOwnBalance, stakeStax, stakeHas } from 'components/wallet/sharesABI';\nimport BigNumber from 'bignumber.js';\nimport Web3 from 'web3';\nimport { LoadingButton } from '@mui/lab';\n// ==============================|| DASHBOARD DEFAULT - POPULAR CARD ||============================== //\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 300,\n    bgcolor: 'background.paper',\n    border: '2px solid #000',\n    boxShadow: 24,\n    borderRadius: 7,\n    borderColor: 'black',\n    p: 3\n};\nconst StakingCard = () => {\n    const theme = useTheme();\n    const [balance, setBalance] = useState(0);\n    const balanceToNumber = new BigNumber(balance);\n    const balanceFormat = balanceToNumber.decimalPlaces(2);\n    const balanceFormatted = balanceFormat.toLocaleString(undefined);\n    const [stakeAmount, setStakeAmount] = useState(0);\n    const [stakeName, setStakeName] = useState(0);\n    const Number18Decimals = 1000000000000000000;\n    const stakeAmountFormatted = Web3.utils.toWei(stakeAmount.toString(), 'ether');\n    const stakeAFormatted = Web3.utils.toBN(stakeAmountFormatted);\n    const [sharesBalance, setSharesBalance] = useState(0);\n    const [stakesList, setStakesList] = useState([[], []]);\n    const [withdrawSum, setWithdrawSum] = useState(0);\n    const withdrawSumFormatted = Web3.utils.toWei(withdrawSum.toString(), 'ether');\n    const withdrawAFormatted = Web3.utils.toBN(withdrawSumFormatted);\n    const [staked, stakedd] = stakesList;\n    const [loading, setLoading] = React.useState(false);\n    const [open, setOpen] = React.useState(false);\n    const [open2, setOpen2] = React.useState(false);\n    const [open3, setOpen3] = React.useState(false);\n    const [open4, setOpen4] = React.useState(false);\n    const handleClose = () => setOpen(false);\n    const handleOpen = () => setOpen(true);\n    const handleClose2 = () => setOpen3(false);\n    const handleOpen2 = () => setOpen2(true);\n    const handleClose3 = () => setOpen3(false);\n    const handleOpen3 = () => setOpen3(true);\n    const handleClose4 = () => setOpen4(false);\n    const handleOpen4 = () => setOpen4(true);\n    const handleLoadingFalse = () => setLoading(false);\n    const handleLoadingTrue = () => setLoading(true);\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const myAPY = 9.125 + sharesBalance * 4.5625;\n    const fetchStaxBalance = async () => {\n        ggetStaxBalance()\n            .then((balance) => {\n                setBalance(balance);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n    const fetchStakesBalance = async () => {\n        stakeHas(true)\n            .then((balancee) => {\n                setStakesList(balancee);\n                console.log(balancee);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n    const fetchSharesBalance = async () => {\n        ggetOwnBalance()\n            .then((balance) => {\n                if (balance > 20) {\n                    setSharesBalance(20);\n                } else {\n                    setSharesBalance(balance);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n    useEffect(() => {\n        async function load() {\n            fetchStaxBalance();\n            stakeHas();\n            fetchSharesBalance();\n            fetchStakesBalance();\n        }\n        load();\n    }, []);\n    return (\n        <>\n            <Modal open={open} onClose={handleClose} aria-labelledby=\"modal-modal-title\" aria-describedby=\"modal-modal-description\">\n                <Box sx={style}>\n                    <Typography variant=\"h5\" textAlign=\"center\" component=\"h2\">\n                        Important: 90% penalty is applied to the `withdraw amount` to all pre-mature stakes.\n                    </Typography>\n                    <Button\n                        onClick={() =>\n                            withdrawAmount(withdrawAFormatted, currentIndex).then(() => {\n                                setOpen(false);\n                                setOpen3(true);\n                                fetchStakesBalance();\n                            })\n                        }\n                        sx={{\n                            mt: 2.5,\n                            fontSize: 15,\n                            width: 80,\n                            height: 30,\n                            color: theme.palette.grey[900],\n                            backgroundColor: theme.palette.success.main\n                        }}\n                    >\n                        Withdraw\n                    </Button>\n                    <TextField\n                        required\n                        sx={{ borderBottom: 2, mt: 2.1, ml: 5, borderColor: theme.palette.success.main }}\n                        onChange={(e) => setWithdrawSum(e.target.value)}\n                        inputProps={{ style: { width: 110, textAlign: 'center', color: 'white' } }}\n                        id=\"standard-basic\"\n                        variant=\"standard\"\n                        color=\"success\"\n                    />\n                </Box>\n            </Modal>\n            <Modal open={open4} onClose={handleClose4} aria-labelledby=\"modal-modal-title\" aria-describedby=\"modal-modal-description\">\n                <Box sx={style}>\n                    <Typography variant=\"h5\" textAlign=\"center\" component=\"h2\">\n                        Important: Your stake will be in `pre-mature` phase for the first 45 days and will face heavy penatlies in case of\n                        any withdraws / claims (90% fee on the staked, 5% on the rewards and minus 1 SHARESBONUS per Transaction).\n                    </Typography>\n                    <Grid item sx={{ display: 'flex', justifyContent: 'center' }}>\n                        <LoadingButton\n                            loading={loading}\n                            onClick={() =>\n                                stakeStax(stakeAFormatted, stakeName).then(() => {\n                                    handleClose4();\n                                    handleOpen3();\n                                    handleLoadingFalse();\n                                    fetchStakesBalance();\n                                    fetchStaxBalance();\n                                })\n                            }\n                            sx={{\n                                mt: 2.5,\n                                fontSize: 15,\n                                width: 50,\n                                height: 30,\n                                color: theme.palette.grey[900],\n                                backgroundColor: theme.palette.success.main\n                            }}\n                        >\n                            Stake\n                        </LoadingButton>\n                    </Grid>\n                </Box>\n            </Modal>\n            <Modal open={open2} onClose={handleClose2} aria-labelledby=\"modal-modal-title\" aria-describedby=\"modal-modal-description\">\n                <Box sx={style}>\n                    <Typography variant=\"h5\" textAlign=\"center\" component=\"h2\">\n                        Important: Each claim reduces the SHARESBONUS by 1. Therefore, the stake APR will be reduced by ~4,56% on each\n                        claim/withdraw.\n                    </Typography>\n                    <Grid item sx={{ display: 'flex', justifyContent: 'center' }}>\n                        <Button\n                            onClick={() =>\n                                withdrawAmount(0, currentIndex).then(() => {\n                                    setOpen2(false);\n                                    setOpen3(true);\n                                    fetchStakesBalance();\n                                })\n                            }\n                            sx={{\n                                mt: 3,\n                                fontSize: 15,\n                                width: 80,\n                                height: 30,\n                                color: theme.palette.grey[900],\n                                backgroundColor: theme.palette.success.main\n                            }}\n                        >\n                            Claim\n                        </Button>\n                    </Grid>\n                </Box>\n            </Modal>\n            <Modal open={open3} onClose={handleClose3} aria-labelledby=\"modal-modal-title\" aria-describedby=\"modal-modal-description\">\n                <Box sx={style}>\n                    <Grid item sx={{ display: 'flex', justifyContent: 'center' }}>\n                        <DoneIcon color=\"success\" fontSize=\"large\" />\n                    </Grid>\n                    <Typography variant=\"h5\" textAlign=\"center\" sx={{ mt: 3 }} component=\"h2\">\n                        Transaction completed.\n                    </Typography>\n                    <Grid item sx={{ display: 'flex', justifyContent: 'center' }}>\n                        <Button\n                            onClick={handleClose3}\n                            sx={{\n                                mt: 3,\n                                fontSize: 15,\n                                width: 80,\n                                height: 30,\n                                color: theme.palette.grey[900],\n                                backgroundColor: theme.palette.success.main\n                            }}\n                        >\n                            Close\n                        </Button>\n                    </Grid>\n                </Box>\n            </Modal>\n            <Grid item container spacing={2} xs={12} sx={{ display: 'flex', justifyContent: 'center' }}>\n                <Grid item lg={12} xs={12} md={12} sm={12}>\n                    <Typography textAlign=\"center\" variant=\"h1\" color={theme.palette.grey[50]}>\n                        Staking\n                    </Typography>\n                    <Divider />\n                </Grid>\n                <Grid item container lg={4} xs={12} sx={{ display: 'flex', justifyContent: 'center', mt: 6 }}>\n                    <Card\n                        sx={{\n                            maxWidth: 1900,\n                            borderLeft: 1,\n                            borderRight: 1,\n                            borderBottom: 3,\n                            borderColor: theme.palette.success.light,\n                            borderRadius: 5,\n                            boxShadow: '0px 10px 20px rgb(0, 230, 117)'\n                        }}\n                    >\n                        <Grid container sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\n                            <Grid item sx={{ backgroundColor: theme.palette.grey[900], mt: 2 }} lg={3.6} xs=\"auto\">\n                                <StaxLogo />\n                            </Grid>\n                            <Grid item lg=\"auto\" xs=\"auto\" sx={{ ml: 0.8, mt: 5 }}>\n                                <Typography variant=\"h2\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                    Stake\n                                </Typography>\n                            </Grid>\n                            <Grid item lg=\"auto\" xs=\"auto\">\n                                <Typography variant=\"h2\" sx={{ ml: 0.7, mt: 5 }} color={theme.palette.success.main} textAlign=\"center\">\n                                    STAX\n                                </Typography>\n                            </Grid>\n                            <Grid item lg={1} xs=\"auto\" sx={{ mt: 5, pt: 0.2 }}>\n                                <Tooltip\n                                    sx={{ color: theme.palette.success.main }}\n                                    title={\n                                        <Typography\n                                            sx={{\n                                                color: theme.palette.success.main\n                                            }}\n                                        >\n                                            Stakes have name, staked amount and SHARESBONUS. Users choose the name and tokens to be staked.\n                                            When creating a stake, the smart contract will get the user`s current sSTX balance and save it\n                                            as SHARESBONUS in the stake`s properties.\n                                        </Typography>\n                                    }\n                                >\n                                    <InfoIcon />\n                                </Tooltip>\n                            </Grid>\n                            <Grid container sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\n                                <Grid\n                                    item\n                                    sx={{ justifyContent: 'center', backgroundColor: theme.palette.grey[900], my: 1 }}\n                                    lg=\"auto\"\n                                    md=\"auto\"\n                                    xs=\"auto\"\n                                >\n                                    <Typography variant=\"h4\" textAlign=\"center\">\n                                        NAME:\n                                    </Typography>\n                                </Grid>\n                                <Grid item sx={{ backgroundColor: theme.palette.grey[900] }} lg=\"auto\">\n                                    <TextField\n                                        required\n                                        sx={{ borderBottom: 2, borderColor: theme.palette.success.main }}\n                                        onChange={(e) => setStakeName(e.target.value)}\n                                        inputProps={{ style: { width: 110, textAlign: 'center', color: 'white' } }}\n                                        id=\"standard-basic\"\n                                        variant=\"standard\"\n                                        color=\"success\"\n                                    />\n                                    <Typography variant=\"h5\" textAlign=\"left\">\n                                        Enter stake name\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                            <Grid container sx={{ mt: 3, display: 'flex', justifyContent: 'center' }}>\n                                <Grid\n                                    item\n                                    sx={{ justifyContent: 'center', backgroundColor: theme.palette.grey[900], my: 1 }}\n                                    lg=\"auto\"\n                                    md=\"auto\"\n                                    xs=\"auto\"\n                                >\n                                    <Typography variant=\"h4\" textAlign=\"center\">\n                                        AMOUNT:\n                                    </Typography>\n                                </Grid>\n                                <Grid item sx={{ backgroundColor: theme.palette.grey[900] }} lg=\"auto\">\n                                    <TextField\n                                        required\n                                        sx={{ borderBottom: 2, borderColor: theme.palette.success.main }}\n                                        onChange={(e) => setStakeAmount(e.target.value)}\n                                        inputProps={{ style: { width: 110, textAlign: 'center', color: 'white' } }}\n                                        type=\"number\"\n                                        id=\"standard-basic\"\n                                        variant=\"standard\"\n                                        color=\"success\"\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'center' }}>\n                                    <Typography variant=\"h5\" textAlign=\"left\">\n                                        Balance: {balanceFormatted} STAX\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                            <Grid container sx={{ mt: 3, display: 'flex', justifyContent: 'center' }}>\n                                <Grid item xs=\"auto\">\n                                    <Typography variant=\"h4\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                        SHARESBONUS:\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs=\"auto\">\n                                    <Typography variant=\"h4\" sx={{ ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                        {sharesBalance}\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs=\"auto\" sx={{ ml: 0.7, mt: -0.3 }}>\n                                    <Tooltip\n                                        sx={{ color: theme.palette.success.main }}\n                                        title={\n                                            <Typography\n                                                sx={{\n                                                    color: theme.palette.success.main\n                                                }}\n                                            >\n                                                SHARESBONUS - shows your current sSTX balance. Each sSTX in your wallet, increases your APY\n                                                by 5%. An user may hold unlimited amount of sSTX but the SHARESBONUS is limited to 20.\n                                                Therefore, we can say the maximum APY is 108% (20 * 5% + 8%).\n                                            </Typography>\n                                        }\n                                    >\n                                        <InfoIcon />\n                                    </Tooltip>\n                                </Grid>\n                            </Grid>\n                            <Grid container sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\n                                <Grid item xs=\"auto\">\n                                    <Typography variant=\"h4\" sx={{ mt: 1 }} color={theme.palette.grey[50]} textAlign=\"center\">\n                                        INITIAL APY:\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs=\"auto\">\n                                    <Typography variant=\"h4\" sx={{ mt: 1, ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                        9.13%\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs=\"auto\" sx={{ ml: 0.7, my: 0.9 }}>\n                                    <Tooltip\n                                        sx={{ color: theme.palette.success.main }}\n                                        title={\n                                            <Typography\n                                                sx={{\n                                                    color: theme.palette.success.main\n                                                }}\n                                            >\n                                                Initial APY - That is the minimum APY that a stake can get if there are no sSTX in the\n                                                wallet of the staker at that given moment.\n                                            </Typography>\n                                        }\n                                    >\n                                        <InfoIcon />\n                                    </Tooltip>\n                                </Grid>\n                            </Grid>\n                            <Grid container sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\n                                <Grid item xs=\"auto\">\n                                    <Typography variant=\"h4\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                        CURRENT APY:\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs=\"auto\">\n                                    <Typography variant=\"h4\" sx={{ ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                        {myAPY}%\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs=\"auto\" sx={{ ml: 0.7, mt: -0.3 }}>\n                                    <Tooltip\n                                        sx={{ color: theme.palette.success.main }}\n                                        title={\n                                            <Typography\n                                                sx={{\n                                                    color: theme.palette.success.main\n                                                }}\n                                            >\n                                                Current APY - shows your APY at the moment if you open a stake. It is calculated by the\n                                                following formula: SHARESBONUS * 5 + 8%. The APY is limited to 108% (20 SHARESBONUS).\n                                            </Typography>\n                                        }\n                                    >\n                                        <InfoIcon />\n                                    </Tooltip>\n                                </Grid>\n                            </Grid>\n                            <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                                <Grid\n                                    item\n                                    sx={{\n                                        backgroundColor: theme.palette.grey[900],\n                                        mt: 2,\n                                        mb: 3\n                                    }}\n                                    lg=\"auto\"\n                                >\n                                    <LoadingButton\n                                        loading={loading}\n                                        onClick={() => {\n                                            handleLoadingTrue();\n                                            handleOpen4();\n                                        }}\n                                        sx={{\n                                            fontSize: 18,\n                                            minHeight: 45,\n                                            minWidth: 140,\n                                            backgroundColor: theme.palette.success.main,\n                                            color: theme.palette.grey[900]\n                                        }}\n                                    >\n                                        Stake\n                                    </LoadingButton>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Card>\n                </Grid>\n                <Grid item container lg={4} xs={12} sx={{ display: 'flex', justifyContent: 'center', mt: 6 }}>\n                    <Card\n                        sx={{\n                            borderLeft: 1,\n                            borderRight: 1,\n                            borderBottom: 3,\n                            borderColor: theme.palette.success.light,\n                            borderRadius: 5,\n                            boxShadow: '0px 10px 20px rgb(0, 230, 117)',\n                            mb: 1\n                        }}\n                    >\n                        <Grid\n                            container\n                            sx={{\n                                backgroundColor: theme.palette.grey[900],\n                                mt: 3,\n                                display: 'flex',\n                                justifyContent: 'center'\n                            }}\n                        >\n                            <Grid item xs=\"auto\">\n                                <Typography variant=\"h2\" sx={{ ml: 1 }} color={theme.palette.grey[50]} textAlign=\"center\">\n                                    APY /\n                                </Typography>\n                            </Grid>\n                            <Grid item xs=\"auto\">\n                                <Typography variant=\"h2\" sx={{ ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                    REWARDS RATE\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                        <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                            <Grid item xs={10}>\n                                <Typography variant=\"h5\" sx={{ my: 4 }} color={theme.palette.grey[50]} textAlign=\"center\">\n                                    When creating a stake, the contract will save the staker`s` sSTX balance as SHARESBONUS. 1 SHARESBONUS +\n                                    ~4.56% APY.\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                        <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                            <Grid item xs=\"auto\">\n                                <Typography variant=\"h3\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                    Initial APY:\n                                </Typography>\n                            </Grid>\n                            <Grid item xs=\"auto\">\n                                <Typography variant=\"h3\" sx={{ ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                    9.125%\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                        <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                            <Grid item xs=\"auto\">\n                                <Typography variant=\"h3\" sx={{ my: 4 }} color={theme.palette.grey[50]} textAlign=\"center\">\n                                    Current APY:\n                                </Typography>\n                            </Grid>\n                            <Grid item xs=\"auto\">\n                                <Typography variant=\"h3\" sx={{ my: 4, ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                    {myAPY}%\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                    </Card>\n                </Grid>\n            </Grid>\n            <Grid\n                cotainer\n                sx={{\n                    display: 'flex',\n                    borderColor: theme.palette.success.light,\n                    borderRadius: 5,\n                    boxShadow: '0px 0px 20px rgb(0, 230, 117)',\n                    justifyContent: 'center',\n                    mb: 15\n                }}\n            >\n                <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n                    <TableContainer sx={{ borderRadius: 5, maxHeight: 350, width: 350 }}>\n                        <Table stickyHeader aria-label=\"sticky table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>\n                                        <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                            NAME\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                            SHARESBONUS\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                            STAKED\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                            REWARDS\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Grid container>\n                                            <Grid item xs={6} sx={{ mt: 0.9 }}>\n                                                <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                                    TUM\n                                                </Typography>\n                                            </Grid>\n                                            <Grid item xs={3}>\n                                                <Tooltip\n                                                    sx={{ mt: 0.6, color: theme.palette.success.main }}\n                                                    title={\n                                                        <Typography\n                                                            sx={{\n                                                                color: theme.palette.success.main\n                                                            }}\n                                                        >\n                                                            TUM stands for Time Until Mature. Each stake will face heavy penalty (90% on the\n                                                            staked balane) if the stake is ended before the 45th day.\n                                                        </Typography>\n                                                    }\n                                                >\n                                                    <InfoIcon />\n                                                </Tooltip>\n                                            </Grid>\n                                        </Grid>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                            ACTIVITIES\n                                        </Typography>\n                                    </TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {stakedd.map((total, index) => (\n                                    <TableRow>\n                                        <TableCell>\n                                            <Typography key={index} textAlign=\"center\">\n                                                {total.stakename}\n                                            </Typography>\n                                        </TableCell>\n                                        <TableCell>\n                                            <Typography key={index} textAlign=\"center\">\n                                                {total.sharesbonus} / {total.sharesbonus * 4.56 + 9.12}%\n                                            </Typography>\n                                        </TableCell>\n                                        <TableCell>\n                                            <Typography key={index} textAlign=\"center\">\n                                                {(total.amount / Number18Decimals).toLocaleString(undefined, {\n                                                    maximumFractionDigits: 2\n                                                })}\n                                            </Typography>\n                                        </TableCell>\n                                        <TableCell>\n                                            <Typography key={index} textAlign=\"center\">\n                                                {(total.claimable / Number18Decimals).toLocaleString(undefined, {\n                                                    maximumFractionDigits: 2\n                                                })}\n                                            </Typography>\n                                        </TableCell>\n                                        <TableCell>\n                                            <Typography key={index} textAlign=\"center\">\n                                                <SimpleDateTime dateSeparator=\"/\" format=\"MYD\" showTime=\"0\">\n                                                    {total.since}\n                                                </SimpleDateTime>\n                                            </Typography>\n                                        </TableCell>\n                                        <TableCell>\n                                            <Grid item container xs={12} sx={{ width: 170 }}>\n                                                <Button\n                                                    onClick={() => {\n                                                        handleOpen();\n                                                        setCurrentIndex(index);\n                                                    }}\n                                                    sx={{\n                                                        fontSize: 15,\n                                                        width: 80,\n                                                        height: 23,\n                                                        color: theme.palette.grey[900],\n                                                        backgroundColor: theme.palette.success.main\n                                                    }}\n                                                    key={index}\n                                                >\n                                                    Withdraw\n                                                </Button>\n                                                <Button\n                                                    onClick={() => {\n                                                        handleOpen2();\n                                                        setCurrentIndex(index);\n                                                    }}\n                                                    sx={{\n                                                        ml: 1,\n                                                        fontSize: 15,\n                                                        width: 80,\n                                                        height: 23,\n                                                        color: theme.palette.grey[900],\n                                                        backgroundColor: theme.palette.success.main\n                                                    }}\n                                                    key={index}\n                                                >\n                                                    Claim\n                                                </Button>\n                                            </Grid>\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Paper>\n            </Grid>\n        </>\n    );\n};\n\nexport default StakingCard;\n","import { Grid } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n// project imports\nimport { gridSpacing } from 'store/constant';\nimport StakingCard from './StakingCard';\n// ==============================|| TYPOGRAPHY ||============================== //\n\nconst Typography = () => {\n    useTheme();\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item lg={12}>\n                <StakingCard />\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default Typography;\n"],"sourceRoot":""}