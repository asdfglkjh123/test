{"version":3,"sources":["components/wallet/sharesABI.js","../node_modules/@mui/icons-material/Info.js","assets/StaxLogoOnly.png","views/utilities/staxlogo.js","views/utilities/StakingCard.js","views/utilities/Typography.js"],"names":["selectedAccount","erc20SharesContract","erc20StaxContract","erc20BusdContract","isInitialized","init","a","provider","window","ethereum","request","method","then","accounts","console","log","catch","err","on","web3","Web3","eth","net","getId","erc20Abi","constant","inputs","name","type","outputs","payable","stateMutability","internalType","components","Contract","ggetOwnBalance","methods","balanceOf","call","balance","utils","toWei","sharesTotalSupply","totalSupply","totalsupply","getSTXPrice","fromWei","getSTXPriceFull","stakeHas","hasStake","purchaseShares","value","PurchaseSHARES","send","from","stakeStax","value2","stakename","stake","approve","address","priceToApprove","ggetStaxBalance","ggetBUSDBalance","ggetTotalDividends","ggetTotalSTAXSupply","_interopRequireDefault","require","Object","defineProperty","exports","default","_createSvgIcon","_jsxRuntime","_default","jsx","d","StaxLogo","useTheme","Grid","justifyContent","alignContent","sx","height","width","src","Stax","alt","StakingCard","theme","useState","setBalance","balanceFormatted","BigNumber","decimalPlaces","toLocaleString","undefined","stakeAmount","setStakeAmount","stakeName","setStakeName","Number18Decimals","stakeAmountFormatted","multipliedBy","sharesBalance","setSharesBalance","stakesList","setStakesList","stakedd","myAPY","fetchStaxBalance","fetchStakesBalance","balancee","fetchSharesBalance","useEffect","load","MainCard","borderRadius","backgroundColor","palette","grey","border","content","CardContent","container","display","mt","item","textAlign","variant","color","Divider","lg","xs","Card","borderLeft","borderRight","borderBottom","borderColor","success","light","boxShadow","my","ml","main","pl","pt","Tooltip","title","md","TextField","onChange","e","target","inputProps","style","id","mb","Button","onClick","fontSize","map","total","index","sharesbonus","sm","amount","maximumFractionDigits","claimable","since","Typography","spacing","gridSpacing"],"mappings":"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","file":"static/js/9.35de3879.chunk.js","sourcesContent":["// import NFTContractBuild from 'contracts/NFT.json';\nimport Web3 from 'web3';\n\nlet selectedAccount;\n\n// let nftContract;\nlet erc20SharesContract;\nlet erc20StaxContract;\nlet erc20BusdContract;\n\nlet isInitialized = false;\n\nexport const init = async () => {\n    const provider = window.ethereum;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    if (typeof provider !== 'undefined') {\n        provider\n            .request({ method: 'eth_requestAccounts' })\n            .then((accounts) => {\n                selectedAccount = accounts[0];\n                console.log(`Selected account is ${selectedAccount}`);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n\n        window.ethereum.on('accountsChanged', (accounts) => {\n            selectedAccount = accounts[0];\n            console.log(`Selected account changed to ${selectedAccount}`);\n        });\n    }\n\n    const web3 = new Web3(provider);\n\n    const networkId = await web3.eth.net.getId();\n\n    const erc20Abi = [\n        {\n            constant: true,\n            inputs: [\n                {\n                    name: '_owner',\n                    type: 'address'\n                }\n            ],\n            name: 'balanceOf',\n            outputs: [\n                {\n                    name: 'balance',\n                    type: 'uint256'\n                }\n            ],\n            payable: false,\n            stateMutability: 'view',\n            type: 'function'\n        },\n        {\n            inputs: [],\n            name: '_getSoldSHARES',\n            outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n            stateMutability: 'view',\n            type: 'function'\n        },\n        {\n            constant: true,\n            inputs: [],\n            name: 'totalSupply',\n            outputs: [\n                {\n                    internalType: 'uint256',\n                    name: '',\n                    type: 'uint256'\n                }\n            ],\n            payable: false,\n            stateMutability: 'view',\n            type: 'function'\n        },\n        {\n            inputs: [\n                {\n                    internalType: 'uint256',\n                    name: 'samount',\n                    type: 'uint256'\n                }\n            ],\n            name: 'PurchaseSHARES',\n            outputs: [],\n            stateMutability: 'nonpayable',\n            type: 'function'\n        },\n        {\n            inputs: [],\n            name: 'getSTXPrice',\n            outputs: [\n                {\n                    internalType: 'uint256',\n                    name: '',\n                    type: 'uint256'\n                }\n            ],\n            stateMutability: 'view',\n            type: 'function'\n        },\n        {\n            inputs: [\n                {\n                    internalType: 'address',\n                    name: '_staker',\n                    type: 'address'\n                }\n            ],\n            name: 'hasStake',\n            outputs: [\n                {\n                    components: [\n                        {\n                            internalType: 'uint256',\n                            name: 'total_amount',\n                            type: 'uint256'\n                        },\n                        {\n                            components: [\n                                {\n                                    internalType: 'address',\n                                    name: 'user',\n                                    type: 'address'\n                                },\n                                {\n                                    internalType: 'string',\n                                    name: 'stakename',\n                                    type: 'string'\n                                },\n                                {\n                                    internalType: 'uint256',\n                                    name: 'amount',\n                                    type: 'uint256'\n                                },\n                                {\n                                    internalType: 'uint256',\n                                    name: 'since',\n                                    type: 'uint256'\n                                },\n                                {\n                                    internalType: 'uint256',\n                                    name: 'claimable',\n                                    type: 'uint256'\n                                },\n                                {\n                                    internalType: 'uint256',\n                                    name: 'sharesbonus',\n                                    type: 'uint256'\n                                }\n                            ],\n                            internalType: 'struct Stakeable.Stake[]',\n                            name: 'stakes',\n                            type: 'tuple[]'\n                        }\n                    ],\n                    internalType: 'struct Stakeable.StakingSummary',\n                    name: '',\n                    type: 'tuple'\n                }\n            ],\n            stateMutability: 'view',\n            type: 'function'\n        },\n        {\n            inputs: [\n                {\n                    internalType: 'address',\n                    name: 'spender',\n                    type: 'address'\n                },\n                {\n                    internalType: 'uint256',\n                    name: 'amount',\n                    type: 'uint256'\n                }\n            ],\n            name: 'approve',\n            outputs: [\n                {\n                    internalType: 'bool',\n                    name: '',\n                    type: 'bool'\n                }\n            ],\n            stateMutability: 'nonpayable',\n            type: 'function'\n        },\n        {\n            inputs: [\n                {\n                    internalType: 'uint256',\n                    name: '_amount',\n                    type: 'uint256'\n                },\n                {\n                    internalType: 'string',\n                    name: '_stakename',\n                    type: 'string'\n                }\n            ],\n            name: 'stake',\n            outputs: [],\n            stateMutability: 'nonpayable',\n            type: 'function'\n        }\n    ];\n\n    erc20SharesContract = new web3.eth.Contract(erc20Abi, '0xb08CE509caFb6660E4F7b951Fbb8ae63930a6aEE');\n    erc20StaxContract = new web3.eth.Contract(erc20Abi, '0xF224398d6d757142eDE2F6AFFa4837DBDa9C04CA');\n    erc20BusdContract = new web3.eth.Contract(erc20Abi, '0xd389253265dd6b85C47c410EC5fF0c6A383CE949');\n\n    isInitialized = true;\n};\nexport const ggetOwnBalance = async () => {\n    if (!isInitialized) {\n        await init();\n    }\n\n    return erc20SharesContract.methods\n        .balanceOf(selectedAccount)\n        .call()\n        .then((balance) => Web3.utils.toWei(balance, 'wei'));\n};\nexport const sharesTotalSupply = async () => {\n    if (!isInitialized) {\n        await init();\n    }\n\n    return erc20SharesContract.methods\n        .totalSupply()\n        .call()\n        .then((totalsupply) => Web3.utils.toWei(totalsupply, 'wei'));\n};\nexport const soldShares = async () => {\n    if (!isInitialized) {\n        await init();\n    }\n\n    // eslint-disable-next-line no-underscore-dangle\n    return (\n        // eslint-disable-next-line no-underscore-dangle\n        erc20SharesContract.methods\n            ._getSoldSHARES()\n            .call()\n            .then((sold) => Web3.utils.toWei(sold, 'wei'))\n    );\n};\nexport const getSTXPrice = async () => {\n    if (!isInitialized) {\n        await init();\n    }\n\n    // eslint-disable-next-line no-underscore-dangle\n    return erc20SharesContract.methods\n        .getSTXPrice()\n        .call()\n        .then((balance) => Web3.utils.fromWei(balance, 'ether'));\n};\nexport const getSTXPriceFull = async () => {\n    if (!isInitialized) {\n        await init();\n    }\n\n    // eslint-disable-next-line no-underscore-dangle\n    return erc20SharesContract.methods\n        .getSTXPrice()\n        .call()\n        .then((balance) => Web3.utils.toWei(balance, 'ether'));\n};\nexport const stakeHas = async () => {\n    if (!isInitialized) {\n        await init();\n    }\n    return erc20StaxContract.methods.hasStake(selectedAccount).call();\n};\nexport const purchaseShares = async (value) => {\n    if (!isInitialized) {\n        await init();\n    }\n    return erc20SharesContract.methods\n        .PurchaseSHARES(value)\n        .send({ from: selectedAccount })\n        .catch((err) => {\n            console.log(err);\n        });\n};\nexport const stakeStax = async (value2, stakename) => {\n    if (!isInitialized) {\n        await init();\n    }\n    return erc20StaxContract.methods.stake(value2, stakename).send({ from: selectedAccount });\n};\n\nexport const approve = async (address, priceToApprove) => {\n    if (!isInitialized) {\n        await init();\n    }\n    return erc20BusdContract.methods\n        .approve('0xb08ce509cafb6660e4f7b951fbb8ae63930a6aee', priceToApprove)\n        .send({ from: selectedAccount })\n        .catch((err) => {\n            console.log(err);\n        });\n};\n\nexport const ggetStaxBalance = async () => {\n    if (!isInitialized) {\n        await init();\n    }\n\n    return erc20StaxContract.methods\n        .balanceOf(selectedAccount)\n        .call()\n        .then((balance) => Web3.utils.fromWei(balance, 'ether'));\n};\nexport const ggetBUSDBalance = async () => {\n    if (!isInitialized) {\n        await init();\n    }\n\n    return erc20BusdContract.methods\n        .balanceOf(selectedAccount)\n        .call()\n        .then((balance) => Web3.utils.fromWei(balance, 'ether'));\n};\nexport const ggetTotalDividends = async () => {\n    if (!isInitialized) {\n        await init();\n    }\n\n    return erc20BusdContract.methods\n        .balanceOf('0xb08ce509cafb6660e4f7b951fbb8ae63930a6aee')\n        .call()\n        .then((balance) => Web3.utils.fromWei(balance, 'ether'));\n};\nexport const ggetTotalSTAXSupply = async () => {\n    if (!isInitialized) {\n        await init();\n    }\n\n    return erc20StaxContract.methods\n        .totalSupply()\n        .call()\n        .then((balance) => Web3.utils.fromWei(balance, 'ether'));\n};\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\"\n}), 'Info');\n\nexports.default = _default;","export default __webpack_public_path__ + \"static/media/StaxLogoOnly.17f6a5b9.png\";","// project imports\nimport Stax from '../../assets/StaxLogoOnly.png';\nimport { Grid } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nconst StaxLogo = () => {\n    useTheme();\n    return (\n        <>\n            <Grid justifyContent=\"center\" alignContent=\"center\" sx={{ height: 350 }}>\n                <img height={100} width=\"height\" src={Stax} alt=\"shares banner\" />\n            </Grid>\n        </>\n    );\n};\n\nexport default StaxLogo;\n","import { useState, useEffect } from 'react';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport { Button, Card, CardContent, Divider, Grid, TextField, Tooltip, Typography } from '@mui/material';\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard';\nimport StaxLogo from './staxlogo';\nimport InfoIcon from '@mui/icons-material/Info';\nimport { ggetStaxBalance, ggetOwnBalance, stakeStax, stakeHas } from 'components/wallet/sharesABI';\nimport BigNumber from 'bignumber.js';\n\n// ==============================|| DASHBOARD DEFAULT - POPULAR CARD ||============================== //\n\nconst StakingCard = () => {\n    const theme = useTheme();\n    const [balance, setBalance] = useState(0);\n    const balanceToNumber = new BigNumber(balance);\n    const balanceFormat = balanceToNumber.decimalPlaces(2);\n    const balanceFormatted = balanceFormat.toLocaleString(undefined);\n    const [stakeAmount, setStakeAmount] = useState(0);\n    const [stakeName, setStakeName] = useState(0);\n    const Number18Decimals = 1000000000000000000;\n    const stakeAmountFormatted = new BigNumber(stakeAmount).multipliedBy(Number18Decimals);\n    const [sharesBalance, setSharesBalance] = useState(0);\n    const [stakesList, setStakesList] = useState([[], []]);\n    const [staked, stakedd] = stakesList;\n    const myAPY = 9.13 + sharesBalance * 4.5625;\n    const fetchStaxBalance = async () => {\n        ggetStaxBalance()\n            .then((balance) => {\n                setBalance(balance);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n    const fetchStakesBalance = async () => {\n        stakeHas(true)\n            .then((balancee) => {\n                setStakesList(balancee);\n                console.log(balancee);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n    const fetchSharesBalance = async () => {\n        ggetOwnBalance()\n            .then((balance) => {\n                if (balance > 20) {\n                    setSharesBalance(20);\n                } else {\n                    setSharesBalance(balance);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n    useEffect(() => {\n        async function load() {\n            fetchStaxBalance();\n            stakeHas();\n            fetchSharesBalance();\n            fetchStakesBalance();\n        }\n        load();\n    }, []);\n    return (\n        <>\n            <MainCard sx={{ borderRadius: 0, backgroundColor: theme.palette.grey[900], border: 0 }} content={false}>\n                <CardContent>\n                    <Grid container sx={{ justifyContent: 'center', display: 'flex' }}>\n                        <Grid container mt={5} sx={{ justifyContent: 'center', display: 'flex' }}>\n                            <Grid item>\n                                <Typography textAlign=\"center\" variant=\"h1\" color={theme.palette.grey[50]}>\n                                    Staking\n                                </Typography>\n                                <Divider />\n                            </Grid>\n                        </Grid>\n                        <Grid item lg={4} xs={12} sx={{ mt: 6 }} justifyContent=\"center\">\n                            <Card\n                                sx={{\n                                    borderLeft: 1,\n                                    borderRight: 1,\n                                    borderBottom: 3,\n                                    borderColor: theme.palette.success.light,\n                                    borderRadius: 5,\n                                    boxShadow: '0px 10px 20px rgb(0, 230, 117)'\n                                }}\n                            >\n                                <Grid container sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\n                                    <Grid\n                                        item\n                                        sx={{ height: 100, backgroundColor: theme.palette.grey[900], my: 1, ml: 1 }}\n                                        lg={3.6}\n                                        xs=\"auto\"\n                                    >\n                                        <StaxLogo />\n                                    </Grid>\n                                    <Grid item lg=\"auto\" xs=\"auto\" sx={{ ml: 2, mt: 5 }}>\n                                        <Typography variant=\"h2\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                            Stake\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item lg=\"auto\" xs=\"auto\">\n                                        <Typography\n                                            variant=\"h2\"\n                                            sx={{ ml: 0.7, mt: 5 }}\n                                            color={theme.palette.success.main}\n                                            textAlign=\"center\"\n                                        >\n                                            STAX\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item lg={1} xs=\"auto\" sx={{ mt: 5, pl: 0.5, pt: 0.2 }}>\n                                        <Tooltip\n                                            sx={{ color: theme.palette.success.main }}\n                                            title={\n                                                <Typography\n                                                    sx={{\n                                                        color: theme.palette.success.main\n                                                    }}\n                                                >\n                                                    Stakes have name, staked amount and SHARESBONUS. Users choose the name and tokens to be\n                                                    staked. When creating a stake, the smart contract will get the user`s current sSTX\n                                                    balance and save it as SHARESBONUS in the stake`s properties.\n                                                </Typography>\n                                            }\n                                        >\n                                            <InfoIcon />\n                                        </Tooltip>\n                                    </Grid>\n                                    <Grid container sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\n                                        <Grid\n                                            item\n                                            sx={{ justifyContent: 'center', backgroundColor: theme.palette.grey[900], my: 1 }}\n                                            lg=\"auto\"\n                                            md=\"auto\"\n                                            xs=\"auto\"\n                                        >\n                                            <Typography variant=\"h4\" textAlign=\"center\">\n                                                NAME:\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item sx={{ backgroundColor: theme.palette.grey[900], my: 0 }} lg=\"auto\">\n                                            <TextField\n                                                sx={{ borderBottom: 2, borderColor: theme.palette.success.main }}\n                                                onChange={(e) => setStakeName(e.target.value)}\n                                                inputProps={{ style: { width: 110, color: 'white' } }}\n                                                id=\"standard-basic\"\n                                                variant=\"standard\"\n                                                color=\"success\"\n                                            />\n                                            <Typography variant=\"h5\" textAlign=\"left\">\n                                                Enter stake name\n                                            </Typography>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid container sx={{ mt: 3, display: 'flex', justifyContent: 'center' }}>\n                                        <Grid\n                                            item\n                                            sx={{ justifyContent: 'center', backgroundColor: theme.palette.grey[900], my: 1 }}\n                                            lg=\"auto\"\n                                            md=\"auto\"\n                                            xs=\"auto\"\n                                        >\n                                            <Typography variant=\"h4\" textAlign=\"center\">\n                                                AMOUNT:\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item sx={{ backgroundColor: theme.palette.grey[900] }} lg=\"auto\">\n                                            <TextField\n                                                sx={{ borderBottom: 2, borderColor: theme.palette.success.main }}\n                                                onChange={(e) => setStakeAmount(e.target.value)}\n                                                inputProps={{ style: { color: 'white' } }}\n                                                type=\"number\"\n                                                id=\"standard-basic\"\n                                                variant=\"standard\"\n                                                color=\"success\"\n                                            />\n                                            <Typography variant=\"h5\" textAlign=\"center\">\n                                                Balance: {balanceFormatted} STAX\n                                            </Typography>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid container sx={{ mt: 3, display: 'flex', justifyContent: 'center' }}>\n                                        <Grid item xs=\"auto\">\n                                            <Typography variant=\"h4\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                                SHARESBONUS:\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item xs=\"auto\">\n                                            <Typography variant=\"h4\" sx={{ ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                                {sharesBalance}\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item xs=\"auto\" sx={{ ml: 0.7, mt: -0.3 }}>\n                                            <Tooltip\n                                                sx={{ color: theme.palette.success.main }}\n                                                title={\n                                                    <Typography\n                                                        sx={{\n                                                            color: theme.palette.success.main\n                                                        }}\n                                                    >\n                                                        SHARESBONUS - shows your current sSTX balance. Each sSTX in your wallet, increases\n                                                        your APY by 5%. An user may hold unlimited amount of sSTX but the SHARESBONUS is\n                                                        limited to 20. Therefore, we can say the maximum APY is 108% (20 * 5% + 8%).\n                                                    </Typography>\n                                                }\n                                            >\n                                                <InfoIcon />\n                                            </Tooltip>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid container sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\n                                        <Grid item xs=\"auto\">\n                                            <Typography variant=\"h4\" sx={{ mt: 1 }} color={theme.palette.grey[50]} textAlign=\"center\">\n                                                INITIAL APY:\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item xs=\"auto\">\n                                            <Typography\n                                                variant=\"h4\"\n                                                sx={{ mt: 1, ml: 1 }}\n                                                color={theme.palette.success.main}\n                                                textAlign=\"center\"\n                                            >\n                                                9.13%\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item xs=\"auto\" sx={{ ml: 0.7, my: 0.9 }}>\n                                            <Tooltip\n                                                sx={{ color: theme.palette.success.main }}\n                                                title={\n                                                    <Typography\n                                                        sx={{\n                                                            color: theme.palette.success.main\n                                                        }}\n                                                    >\n                                                        Initial APY - That is the minimum APY that a stake can get if there are no sSTX in\n                                                        the wallet of the staker at that given moment.\n                                                    </Typography>\n                                                }\n                                            >\n                                                <InfoIcon />\n                                            </Tooltip>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid container sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\n                                        <Grid item xs=\"auto\">\n                                            <Typography variant=\"h4\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                                CURRENT APY:\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item xs=\"auto\">\n                                            <Typography variant=\"h4\" sx={{ ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                                {myAPY}%\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item xs=\"auto\" sx={{ ml: 0.7, mt: -0.3 }}>\n                                            <Tooltip\n                                                sx={{ color: theme.palette.success.main }}\n                                                title={\n                                                    <Typography\n                                                        sx={{\n                                                            color: theme.palette.success.main\n                                                        }}\n                                                    >\n                                                        Current APY - shows your APY at the moment if you open a stake. It is calculated by\n                                                        the following formula: SHARESBONUS * 5 + 8%. The APY is limited to 108% (20\n                                                        SHARESBONUS).\n                                                    </Typography>\n                                                }\n                                            >\n                                                <InfoIcon />\n                                            </Tooltip>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                                        <Grid\n                                            item\n                                            sx={{\n                                                backgroundColor: theme.palette.grey[900],\n                                                mt: 2,\n                                                mb: 3\n                                            }}\n                                            lg=\"auto\"\n                                        >\n                                            <Button\n                                                onClick={() => {\n                                                    fetchStaxBalance();\n                                                    fetchSharesBalance();\n                                                    stakeStax(stakeAmountFormatted, stakeName).then(() => {\n                                                        fetchStaxBalance();\n                                                        fetchSharesBalance();\n                                                        fetchStakesBalance();\n                                                    });\n                                                }}\n                                                sx={{\n                                                    fontSize: 20,\n                                                    width: 130,\n                                                    color: theme.palette.grey[900],\n                                                    backgroundColor: theme.palette.success.main\n                                                }}\n                                            >\n                                                Stake\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item lg={4} xs={12} sx={{ mt: 6 }}>\n                            <Card\n                                sx={{\n                                    borderLeft: 1,\n                                    borderRight: 1,\n                                    borderBottom: 3,\n                                    borderColor: theme.palette.success.light,\n                                    borderRadius: 5,\n                                    boxShadow: '0px 10px 20px rgb(0, 230, 117)',\n                                    mb: 1\n                                }}\n                            >\n                                <Grid\n                                    container\n                                    sx={{\n                                        backgroundColor: theme.palette.grey[900],\n                                        mt: 3,\n                                        display: 'flex',\n                                        justifyContent: 'center'\n                                    }}\n                                >\n                                    <Grid item xs=\"auto\">\n                                        <Typography variant=\"h2\" sx={{ ml: 1 }} color={theme.palette.grey[50]} textAlign=\"center\">\n                                            APY /\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item xs=\"auto\">\n                                        <Typography variant=\"h2\" sx={{ ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                            REWARDS RATE\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                                <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                                    <Grid item xs={10}>\n                                        <Typography variant=\"h5\" sx={{ my: 4 }} color={theme.palette.grey[50]} textAlign=\"center\">\n                                            When creating a stake, the contract will save the staker`s` sSTX balance as SHARESBONUS. 1\n                                            SHARESBONUS = + 5% APY.\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                                <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                                    <Grid item xs=\"auto\">\n                                        <Typography variant=\"h3\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                            Initial APY:\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item xs=\"auto\">\n                                        <Typography variant=\"h3\" sx={{ ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                            9.13%\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                                <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                                    <Grid item xs=\"auto\">\n                                        <Typography variant=\"h3\" sx={{ my: 4 }} color={theme.palette.grey[50]} textAlign=\"center\">\n                                            Current APY:\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item xs=\"auto\">\n                                        <Typography\n                                            variant=\"h3\"\n                                            sx={{ my: 4, ml: 1 }}\n                                            color={theme.palette.success.main}\n                                            textAlign=\"center\"\n                                        >\n                                            {myAPY}%\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item lg={8} xs={12} sx={{ mt: 5 }}>\n                            <Card\n                                sx={{\n                                    width: 'auto',\n                                    borderLeft: 1,\n                                    borderRight: 1,\n                                    borderBottom: 3,\n                                    borderColor: theme.palette.success.light,\n                                    borderRadius: 5,\n                                    boxShadow: '0px 10px 20px rgb(0, 230, 117)',\n                                    mb: 10\n                                }}\n                            >\n                                <Grid\n                                    container\n                                    sx={{\n                                        backgroundColor: theme.palette.grey[900],\n                                        mt: 3,\n                                        display: 'flex',\n                                        justifyContent: 'center'\n                                    }}\n                                >\n                                    <Grid item xs=\"auto\">\n                                        <Typography variant=\"h2\" sx={{ ml: 1 }} color={theme.palette.grey[50]} textAlign=\"center\">\n                                            Active Stakes\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                                <Grid container sx={{ my: 3, display: 'flex', justifyContent: 'center' }}>\n                                    <Grid item lg={1.8} md={1.9} xs=\"auto\" sx={{ pl: 1, pt: 0.2 }}>\n                                        <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                                            <Typography\n                                                variant=\"h4\"\n                                                sx={{ mt: -0.2 }}\n                                                color={theme.palette.success.main}\n                                                textAlign=\"center\"\n                                            >\n                                                Name\n                                            </Typography>\n                                            <Tooltip\n                                                sx={{ color: theme.palette.success.main, mt: -0.3 }}\n                                                title={\n                                                    <Typography\n                                                        sx={{\n                                                            color: theme.palette.success.main\n                                                        }}\n                                                    >\n                                                        Name of the stake.\n                                                    </Typography>\n                                                }\n                                            >\n                                                <InfoIcon />\n                                            </Tooltip>\n                                        </Grid>\n                                        <Divider sx={{ backgroundColor: theme.palette.grey[50] }} />\n                                        <Grid item lg=\"auto\" xs=\"auto\" sx={{ mt: 1 }}>\n                                            <Typography variant=\"h4\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                                {stakedd.map((total, index) => (\n                                                    <Typography sx={{ mb: 3 }} key={index}>\n                                                        {total.stakename}\n                                                    </Typography>\n                                                ))}\n                                            </Typography>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item lg={1.8} md={2} xs=\"auto\" sx={{ pl: 1, pt: 0.2 }}>\n                                        <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                                            <Typography\n                                                variant=\"h4\"\n                                                sx={{ mt: -0.2 }}\n                                                color={theme.palette.success.main}\n                                                textAlign=\"center\"\n                                            >\n                                                Sharesbonus\n                                            </Typography>\n                                            <Tooltip\n                                                sx={{ color: theme.palette.success.main, mt: -0.3 }}\n                                                title={\n                                                    <Typography\n                                                        sx={{\n                                                            color: theme.palette.success.main\n                                                        }}\n                                                    >\n                                                        SHARESBONUS (BONUS) shows the amount of sSTX that you held at the moment of opening\n                                                        the stake. It also increases your stake APY as it follows: 5% per sSTX token. Each\n                                                        sSTX increases the SHAREBONUS by the factor of 1. There is a limit of maximum 20\n                                                        SHARESBONUS or 100% Bonus APY.\n                                                    </Typography>\n                                                }\n                                            >\n                                                <InfoIcon />\n                                            </Tooltip>\n                                        </Grid>\n                                        <Grid item lg=\"auto\" xs=\"auto\" sx={{ mt: 1 }}>\n                                            {stakedd.map((total, index) => (\n                                                <Typography sx={{ mb: 3 }} textAlign=\"center\" key={index}>\n                                                    {total.sharesbonus}\n                                                </Typography>\n                                            ))}\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item lg={1.8} md={1.9} sm=\"auto\" xs=\"auto\" sx={{ pl: 1, pt: 0.2 }}>\n                                        <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                                            <Typography\n                                                variant=\"h4\"\n                                                sx={{ mt: -0.2 }}\n                                                color={theme.palette.success.main}\n                                                textAlign=\"center\"\n                                            >\n                                                Staked\n                                            </Typography>\n                                            <Tooltip\n                                                sx={{ color: theme.palette.success.main, mt: -0.3 }}\n                                                title={\n                                                    <Typography\n                                                        sx={{\n                                                            color: theme.palette.success.main\n                                                        }}\n                                                    >\n                                                        Shows the amount of staked STAX tokens.\n                                                    </Typography>\n                                                }\n                                            >\n                                                <InfoIcon />\n                                            </Tooltip>\n                                        </Grid>\n                                        <Grid container sx={{ display: 'flex', justifyContent: 'center', mt: 1 }}>\n                                            <Typography variant=\"h4\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                                {stakedd.map((total, index) => (\n                                                    <Typography sx={{ mb: 3 }} key={index}>\n                                                        {(total.amount / Number18Decimals).toLocaleString(undefined, {\n                                                            maximumFractionDigits: 2\n                                                        })}\n                                                    </Typography>\n                                                ))}\n                                            </Typography>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item lg={1.8} md={1.9} xs=\"auto\" sx={{ pl: 1, pt: 0.2 }}>\n                                        <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                                            <Typography\n                                                variant=\"h4\"\n                                                sx={{ mt: -0.2 }}\n                                                color={theme.palette.success.main}\n                                                textAlign=\"center\"\n                                            >\n                                                Rewards\n                                            </Typography>\n                                            <Tooltip\n                                                sx={{ color: theme.palette.success.main, mt: -0.3 }}\n                                                title={\n                                                    <Typography\n                                                        sx={{\n                                                            color: theme.palette.success.main\n                                                        }}\n                                                    >\n                                                        Shows the rewards of the stake.\n                                                    </Typography>\n                                                }\n                                            >\n                                                <InfoIcon />\n                                            </Tooltip>\n                                        </Grid>\n                                        <Grid container sx={{ display: 'flex', justifyContent: 'center', mt: 1 }}>\n                                            <Typography variant=\"h4\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                                {stakedd.map((total, index) => (\n                                                    <Typography\n                                                        sx={{ mb: 3 }}\n                                                        color={theme.palette.grey[50]}\n                                                        textAlign=\"center\"\n                                                        key={index}\n                                                    >\n                                                        {(total.claimable / Number18Decimals).toLocaleString(undefined, {\n                                                            maximumFractionDigits: 2\n                                                        })}\n                                                    </Typography>\n                                                ))}\n                                            </Typography>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item lg={1.8} md={1.9} xs=\"auto\" sx={{ pl: 1, pt: 0.2 }}>\n                                        <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                                            <Typography\n                                                variant=\"h4\"\n                                                sx={{ mt: -0.2 }}\n                                                color={theme.palette.success.main}\n                                                textAlign=\"center\"\n                                            >\n                                                TUM\n                                            </Typography>\n                                            <Tooltip\n                                                sx={{ color: theme.palette.success.main, mt: -0.3 }}\n                                                title={\n                                                    <Typography\n                                                        sx={{\n                                                            color: theme.palette.success.main\n                                                        }}\n                                                    >\n                                                        TUM stands for Time Until Mature and it shows how many days left until a user can\n                                                        claim the stake rewards or close it without facing a penalty.\n                                                    </Typography>\n                                                }\n                                            >\n                                                <InfoIcon />\n                                            </Tooltip>\n                                        </Grid>\n                                        <Grid item lg=\"auto\" xs=\"auto\" sx={{ mt: 1 }}>\n                                            {stakedd.map((total, index) => (\n                                                <Typography sx={{ mb: 3 }} color={theme.palette.grey[50]} textAlign=\"center\" key={index}>\n                                                    {total.since}\n                                                </Typography>\n                                            ))}\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item lg={1.8} md={1.9} xs=\"auto\" sx={{ pl: 1, pt: 0.2 }}>\n                                        <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                                            <Typography\n                                                variant=\"h4\"\n                                                sx={{ mt: -0.2 }}\n                                                color={theme.palette.success.main}\n                                                textAlign=\"center\"\n                                            >\n                                                Activities\n                                            </Typography>\n                                            <Tooltip\n                                                sx={{ color: theme.palette.success.main, mt: -0.3 }}\n                                                title={\n                                                    <Typography\n                                                        sx={{\n                                                            color: theme.palette.success.main\n                                                        }}\n                                                    >\n                                                        Users may claim their rewards or close the stake by clicking below buttons.\n                                                    </Typography>\n                                                }\n                                            >\n                                                <InfoIcon />\n                                            </Tooltip>\n                                        </Grid>\n                                        <Grid container sx={{ display: 'flex', justifyContent: 'center', mt: 0.5 }}>\n                                            {stakedd.map((total, index) => (\n                                                <>\n                                                    <Button\n                                                        sx={{\n                                                            mb: 2.5,\n                                                            fontSize: 15,\n                                                            width: 30,\n                                                            height: 25,\n                                                            color: theme.palette.grey[900],\n                                                            backgroundColor: theme.palette.success.main\n                                                        }}\n                                                        key={index}\n                                                    >\n                                                        Close\n                                                    </Button>\n                                                </>\n                                            ))}\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n            </MainCard>\n        </>\n    );\n};\n\nexport default StakingCard;\n","import { Grid } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n// project imports\nimport { gridSpacing } from 'store/constant';\nimport StakingCard from './StakingCard';\n// ==============================|| TYPOGRAPHY ||============================== //\n\nconst Typography = () => {\n    useTheme();\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item lg={12}>\n                <StakingCard />\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default Typography;\n"],"sourceRoot":""}