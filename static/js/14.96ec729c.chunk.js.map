{"version":3,"sources":["views/utilities/staxlogo.js","views/utilities/StakingCard.js","views/utilities/Typography.js"],"names":["StaxLogo","useTheme","Grid","justifyContent","alignContent","sx","height","width","src","Stax","alt","style","position","top","left","transform","bgcolor","border","boxShadow","borderRadius","borderColor","p","StakingCard","theme","useState","balance","setBalance","balanceFormatted","BigNumber","decimalPlaces","toLocaleString","undefined","preAmount","setPreAmount","stakeAmount","setStakeAmount","stakeAmountF","Web3","utils","toWei","toString","stakeAmountFormatted","toBN","stakeName","setStakeName","Number18Decimals","sharesBalance","setSharesBalance","stakesList","setStakesList","currentClaimable","setCurrentClaimable","currentStaked","setCurrentStaked","withdrawSum","setWithdrawSum","withdrawSumFormatted","withdrawAFormatted","stakedd","React","loading","setLoading","loading2","setLoading2","loading3","setLoading3","loading4","setLoading4","loading5","setLoading5","open","setOpen","open2","setOpen2","open3","setOpen3","open4","setOpen4","handleClose","handleOpen","handleClose2","handleOpen2","handleClose3","handleClose4","handleLoadingFalse","handleLoadingFalse3","handleLoadingTrue3","handleLoadingFalse4","handleLoadingTrue4","handleLoadingFalse5","handleLoadingTrue5","currentIndex","setCurrentIndex","myAPY","fetchStaxBalance","a","ggetStaxBalance","then","catch","err","console","log","fetchStakesBalance","stakeHas","balancee","fetchSharesBalance","ggetOwnBalance","useEffect","load","Modal","onBackdropClick","onClose","Box","variant","textAlign","component","item","container","mt","mb","display","maximumFractionDigits","ml","TextField","required","borderBottom","palette","success","main","onChange","e","target","value","inputProps","color","id","label","LoadingButton","onClick","withdrawAmount","fontSize","grey","backgroundColor","stakeStax","minHeight","minWidth","my","Button","spacing","xs","lg","Card","maxWidth","borderLeft","borderRight","light","pt","Tooltip","title","md","TableContainer","Table","TableHead","TableRow","TableCell","map","total","index","TableBody","stakename","sharesbonus","amount","claimable","dateSeparator","format","showTime","since","Typography","gridSpacing"],"mappings":"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","file":"static/js/14.96ec729c.chunk.js","sourcesContent":["// project imports\nimport Stax from '../../assets/StaxLogoOnly.png';\nimport { Grid } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nconst StaxLogo = () => {\n    useTheme();\n    return (\n        <>\n            <Grid justifyContent=\"center\" alignContent=\"center\" sx={{ height: 100 }}>\n                <img height={80} width=\"height\" src={Stax} alt=\"shares banner\" />\n            </Grid>\n        </>\n    );\n};\n\nexport default StaxLogo;\n","import React, { useState, useEffect } from 'react';\n\n// material-ui\nimport SimpleDateTime from 'react-simple-timestamp-to-date';\nimport { useTheme } from '@mui/material/styles';\nimport {\n    Button,\n    Box,\n    Card,\n    Grid,\n    Table,\n    TableContainer,\n    TextField,\n    Tooltip,\n    TableHead,\n    Typography,\n    TableBody,\n    TableRow,\n    TableCell,\n    Modal\n} from '@mui/material';\n// project imports\nimport StaxLogo from './staxlogo';\nimport DoneIcon from '@mui/icons-material/Done';\nimport InfoIcon from '@mui/icons-material/Info';\nimport { ggetStaxBalance, withdrawAmount, ggetOwnBalance, stakeStax, stakeHas } from 'components/wallet/sharesABI';\nimport BigNumber from 'bignumber.js';\nimport Web3 from 'web3';\nimport { LoadingButton } from '@mui/lab';\nimport LayersIcon from '@mui/icons-material/Layers';\nimport XsStaxLogo from './xsStaxLogo';\n// ==============================|| DASHBOARD DEFAULT - POPULAR CARD ||============================== //\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 300,\n    bgcolor: 'background.paper',\n    border: '2px solid #000000',\n    boxShadow: 24,\n    borderRadius: 7,\n    borderColor: 'black',\n    p: 3\n};\nconst StakingCard = () => {\n    const theme = useTheme();\n    const [balance, setBalance] = useState(0);\n    const balanceToNumber = new BigNumber(balance);\n    const balanceFormat = balanceToNumber.decimalPlaces(2);\n    const balanceFormatted = balanceFormat.toLocaleString(undefined);\n    const [preAmount, setPreAmount] = useState(0);\n    const [stakeAmount, setStakeAmount] = useState(0);\n    const stakeAmountF = Web3.utils.toWei(stakeAmount.toString(), 'ether');\n    const stakeAmountFormatted = Web3.utils.toBN(stakeAmountF);\n    const [stakeName, setStakeName] = useState(0);\n    const Number18Decimals = 1000000000000000000;\n    const [sharesBalance, setSharesBalance] = useState(0);\n    const [stakesList, setStakesList] = useState([[], []]);\n    const [currentClaimable, setCurrentClaimable] = useState(0);\n    const [currentStaked, setCurrentStaked] = useState(0);\n    const [withdrawSum, setWithdrawSum] = useState(0);\n    const withdrawSumFormatted = Web3.utils.toWei(withdrawSum.toString(), 'ether');\n    const withdrawAFormatted = Web3.utils.toBN(withdrawSumFormatted);\n    const [staked, stakedd] = stakesList;\n    // POP - UPS\n    const [loading, setLoading] = React.useState(false);\n    const [loading2, setLoading2] = React.useState(false);\n    const [loading3, setLoading3] = React.useState(false);\n    const [loading4, setLoading4] = React.useState(false);\n    const [loading5, setLoading5] = React.useState(false);\n    const [open, setOpen] = React.useState(false);\n    const [open2, setOpen2] = React.useState(false);\n    const [open3, setOpen3] = React.useState(false);\n    const [open4, setOpen4] = React.useState(false);\n    const handleClose = () => setOpen(false);\n    const handleOpen = () => setOpen(true);\n    const handleClose2 = () => setOpen2(false);\n    const handleOpen2 = () => setOpen2(true);\n    const handleClose3 = () => setOpen3(false);\n    const handleOpen3 = () => setOpen3(true);\n    const handleClose4 = () => setOpen4(false);\n    const handleOpen4 = () => setOpen4(true);\n    const handleLoadingFalse = () => setLoading(false);\n    const handleLoadingTrue = () => setLoading(true);\n    const handleLoadingFalse2 = () => setLoading2(false);\n    const handleLoadingTrue2 = () => setLoading2(true);\n    const handleLoadingFalse3 = () => setLoading3(false);\n    const handleLoadingTrue3 = () => setLoading3(true);\n    const handleLoadingFalse4 = () => setLoading4(false);\n    const handleLoadingTrue4 = () => setLoading4(true);\n    const handleLoadingFalse5 = () => setLoading5(false);\n    const handleLoadingTrue5 = () => setLoading5(true);\n    const updateStakeAmount = (event, newValue) => {\n        setStakeAmount(newValue);\n    };\n    //  WITHDRAWING INDEX\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const myAPY = 9.125 + sharesBalance * 4.5625;\n    //  FETCHING BLOCKCHAIN DATA\n    const fetchStaxBalance = async () => {\n        ggetStaxBalance()\n            .then((balance) => {\n                setBalance(balance);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n    const fetchStakesBalance = async () => {\n        stakeHas(true)\n            .then((balancee) => {\n                setStakesList(balancee);\n                console.log(balancee);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n    const fetchSharesBalance = async () => {\n        ggetOwnBalance()\n            .then((balance) => {\n                if (balance > 20) {\n                    setSharesBalance(20);\n                } else {\n                    setSharesBalance(balance);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n    useEffect(() => {\n        async function load() {\n            fetchStaxBalance();\n            stakeHas();\n            fetchSharesBalance();\n            fetchStakesBalance();\n        }\n        load();\n    }, []);\n    return (\n        <>\n            <Modal\n                open={open}\n                onBackdropClick={() => {\n                    handleClose();\n                    handleLoadingFalse3();\n                }}\n                onClose={handleClose}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <Box sx={style}>\n                    <Typography variant=\"h5\" textAlign=\"center\" component=\"h2\">\n                        Important: 90% penalty is applied to the `withdraw amount` to all pre-mature stakes.\n                    </Typography>\n                    <Grid item container sx={{ mt: 2, mb: 1, display: 'flex', justifyContent: 'center' }}>\n                        <Typography variant=\"h5\" textAlign=\"center\" component=\"h2\">\n                            Rewards:{' '}\n                            {(currentClaimable / Number18Decimals).toLocaleString(undefined, {\n                                maximumFractionDigits: 2\n                            })}\n                        </Typography>\n                        <Typography variant=\"h5\" textAlign=\"center\" sx={{ ml: 2 }} component=\"h2\">\n                            Staked:{' '}\n                            {(currentStaked / Number18Decimals).toLocaleString(undefined, {\n                                maximumFractionDigits: 2\n                            })}\n                        </Typography>\n                    </Grid>\n                    <Grid item sx={{ justifyContent: 'center', display: 'flex' }}>\n                        <TextField\n                            required\n                            sx={{ borderBottom: 2, borderColor: theme.palette.success.main }}\n                            onChange={(e) => setWithdrawSum(e.target.value)}\n                            inputProps={{ style: { width: 120, textAlign: 'center', color: 'white' } }}\n                            id=\"standard-basic\"\n                            label=\"Withdraw amount\"\n                            variant=\"standard\"\n                            color=\"success\"\n                        />\n                    </Grid>\n                    <Grid item sx={{ justifyContent: 'center', display: 'flex' }}>\n                        <LoadingButton\n                            loading={loading5}\n                            onClick={() => {\n                                handleLoadingTrue5();\n                                withdrawAmount(withdrawAFormatted, currentIndex).then(() => {\n                                    handleLoadingFalse5();\n                                    setOpen(false);\n                                    setOpen3(true);\n                                    handleLoadingFalse3();\n                                    fetchStakesBalance();\n                                });\n                            }}\n                            sx={{\n                                mt: 2.5,\n                                fontSize: 15,\n                                width: 80,\n                                height: 30,\n                                color: theme.palette.grey[900],\n                                bgcolor: theme.palette.success.main,\n                                backgroundColor: theme.palette.success.main\n                            }}\n                        >\n                            Withdraw\n                        </LoadingButton>\n                    </Grid>\n                </Box>\n            </Modal>\n            <Modal\n                open={open4}\n                onClose={handleClose4}\n                onBackdropClick={() => {\n                    handleClose4();\n                    handleLoadingFalse();\n                }}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <Box sx={style}>\n                    <Typography variant=\"h5\" textAlign=\"center\" component=\"h2\">\n                        Important: Your stake will be in `pre-mature` phase for the first 45 days and will face heavy penatlies in case of\n                        any withdraws / claims (90% fee on the staked, 5% on the rewards and minus 1 SHARESBONUS per Transaction).\n                    </Typography>\n                    <Grid item sx={{ display: 'flex', justifyContent: 'center' }}>\n                        <LoadingButton\n                            loading={loading2}\n                            onClick={() => {\n                                handleLoadingTrue2();\n                                stakeStax(stakeAmountFormatted, stakeName).then(() => {\n                                    handleClose4();\n                                    handleOpen3();\n                                    handleLoadingFalse2();\n                                    handleLoadingFalse();\n                                    fetchStakesBalance();\n                                    fetchStaxBalance();\n                                });\n                            }}\n                            sx={{\n                                fontSize: 18,\n                                minHeight: 45,\n                                minWidth: 140,\n                                mt: 3,\n                                bgcolor: theme.palette.success.main,\n                                backgroundColor: theme.palette.success.main,\n                                color: theme.palette.grey[900]\n                            }}\n                        >\n                            Stake\n                        </LoadingButton>\n                    </Grid>\n                </Box>\n            </Modal>\n            <Modal\n                open={open2}\n                onClose={handleClose2}\n                onBackdropClick={() => {\n                    handleClose2();\n                    handleLoadingFalse5();\n                    handleLoadingFalse4();\n                }}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <Box sx={style}>\n                    <Typography variant=\"h5\" textAlign=\"center\" component=\"h2\">\n                        Important: Each claim reduces the SHARESBONUS by 1. Therefore, the stake APR will be reduced by ~4,56% on each\n                        claim/withdraw.\n                    </Typography>\n                    <Grid item sx={{ display: 'flex', my: 2, justifyContent: 'center' }}>\n                        <Typography variant=\"h5\" textAlign=\"center\" component=\"h2\" key={currentIndex}>\n                            Amount to be claimed:{' '}\n                            {(currentClaimable / Number18Decimals).toLocaleString(undefined, {\n                                maximumFractionDigits: 2\n                            })}\n                        </Typography>\n                    </Grid>\n                    <Grid item sx={{ display: 'flex', justifyContent: 'center' }}>\n                        <LoadingButton\n                            loading={loading5}\n                            onClick={() => {\n                                handleLoadingTrue5();\n                                withdrawAmount(0, currentIndex)\n                                    .then(() => {\n                                        handleLoadingFalse5();\n                                        setOpen2(false);\n                                        setOpen3(true);\n                                        handleLoadingFalse4();\n                                        fetchStakesBalance();\n                                    })\n                                    .catch(() => {\n                                        handleLoadingFalse5();\n                                    });\n                            }}\n                            sx={{\n                                mt: 1,\n                                fontSize: 18,\n                                minHeight: 35,\n                                minWidth: 110,\n                                bgcolor: theme.palette.success.main,\n                                backgroundColor: theme.palette.success.main,\n                                color: theme.palette.grey[900]\n                            }}\n                        >\n                            Claim\n                        </LoadingButton>\n                    </Grid>\n                </Box>\n            </Modal>\n            <Modal\n                open={open3}\n                onClose={handleClose3}\n                onBackdropClick={handleClose3}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <Box sx={style}>\n                    <Grid item sx={{ display: 'flex', justifyContent: 'center' }}>\n                        <DoneIcon color=\"success\" fontSize=\"large\" />\n                    </Grid>\n                    <Typography variant=\"h5\" textAlign=\"center\" sx={{ mt: 3 }} component=\"h2\">\n                        Transaction completed.\n                    </Typography>\n                    <Grid item sx={{ display: 'flex', justifyContent: 'center' }}>\n                        <Button\n                            onClick={handleClose3}\n                            sx={{\n                                mt: 2,\n                                fontSize: 18,\n                                minHeight: 45,\n                                minWidth: 140,\n                                bgcolor: theme.palette.success.main,\n                                backgroundColor: theme.palette.success.main,\n                                color: theme.palette.grey[900]\n                            }}\n                        >\n                            Close\n                        </Button>\n                    </Grid>\n                </Box>\n            </Modal>\n            <Grid item container spacing={2} xs={12} sx={{ display: 'flex', justifyContent: 'center' }}>\n                <Grid item container sx={{ display: 'flex', justifyContent: 'center', mt: 7 }}>\n                    <Typography textAlign=\"center\" variant=\"h1\" color={theme.palette.grey[50]}>\n                        Stake\n                    </Typography>\n                    <LayersIcon color=\"success\" fontSize=\"large\" sx={{ mt: 2, ml: 1 }} />\n                </Grid>\n                <Grid item container lg={4} xs={12} sx={{ display: 'flex', justifyContent: 'center', mt: 6 }}>\n                    <Card\n                        sx={{\n                            maxWidth: 1900,\n                            borderLeft: 1,\n                            borderRight: 1,\n                            borderBottom: 3,\n                            borderColor: theme.palette.success.light,\n                            borderRadius: 5,\n                            boxShadow: '0px 10px 20px rgb(0, 230, 117)'\n                        }}\n                    >\n                        <Grid container sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\n                            <Grid item sx={{ backgroundColor: theme.palette.grey[900], mt: 2 }} lg={3.6} xs=\"auto\">\n                                <StaxLogo />\n                            </Grid>\n                            <Grid item lg=\"auto\" xs=\"auto\" sx={{ ml: 0.8, mt: 5 }}>\n                                <Typography variant=\"h2\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                    Stake\n                                </Typography>\n                            </Grid>\n                            <Grid item lg=\"auto\" xs=\"auto\">\n                                <Typography variant=\"h2\" sx={{ ml: 0.7, mt: 5 }} color={theme.palette.success.main} textAlign=\"center\">\n                                    STAX\n                                </Typography>\n                            </Grid>\n                            <Grid item lg={1} xs=\"auto\" sx={{ mt: 5, pt: 0.2 }}>\n                                <Tooltip\n                                    sx={{ color: theme.palette.success.main }}\n                                    title={\n                                        <Typography\n                                            sx={{\n                                                color: theme.palette.success.main\n                                            }}\n                                        >\n                                            Stakes have name, staked amount and SHARESBONUS. Users choose the name and tokens to be staked.\n                                            When creating a stake, the smart contract will get the user`s current sSTX balance and save it\n                                            as SHARESBONUS in the stake`s properties.\n                                        </Typography>\n                                    }\n                                >\n                                    <InfoIcon />\n                                </Tooltip>\n                            </Grid>\n                            <Grid container sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\n                                <Grid\n                                    item\n                                    sx={{ justifyContent: 'center', backgroundColor: theme.palette.grey[900], my: 1 }}\n                                    lg=\"auto\"\n                                    md=\"auto\"\n                                    xs=\"auto\"\n                                >\n                                    <Typography variant=\"h4\" textAlign=\"center\">\n                                        NAME:\n                                    </Typography>\n                                </Grid>\n                                <Grid item sx={{ backgroundColor: theme.palette.grey[900] }} lg=\"auto\">\n                                    <TextField\n                                        required\n                                        sx={{ borderBottom: 2, borderColor: theme.palette.success.main }}\n                                        onChange={(e) => setStakeName(e.target.value)}\n                                        inputProps={{ style: { width: 110, textAlign: 'center', color: 'white' } }}\n                                        id=\"standard-basic\"\n                                        variant=\"standard\"\n                                        color=\"success\"\n                                    />\n                                    <Typography variant=\"h5\" textAlign=\"left\">\n                                        Enter stake name\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                            <Grid container sx={{ mt: 3, display: 'flex', justifyContent: 'center' }}>\n                                <Grid\n                                    item\n                                    sx={{ justifyContent: 'center', backgroundColor: theme.palette.grey[900], my: 1 }}\n                                    lg=\"auto\"\n                                    md=\"auto\"\n                                    xs=\"auto\"\n                                >\n                                    <Typography variant=\"h4\" textAlign=\"center\">\n                                        AMOUNT:\n                                    </Typography>\n                                </Grid>\n                                <Grid item sx={{ backgroundColor: theme.palette.grey[900] }} lg=\"auto\">\n                                    <TextField\n                                        sx={{ borderBottom: 2, borderColor: theme.palette.success.main }}\n                                        onChange={(e) => setPreAmount(e.target.value)}\n                                        inputProps={{ style: { width: 110, textAlign: 'center', color: 'white' } }}\n                                        id=\"standard-basic\"\n                                        variant=\"standard\"\n                                        color=\"success\"\n                                    />\n                                </Grid>\n                                <Grid item container xs={12} sx={{ display: 'flex', justifyContent: 'center' }}>\n                                    <Typography variant=\"h5\" textAlign=\"left\">\n                                        Balance: {balanceFormatted}\n                                    </Typography>\n                                    <XsStaxLogo />\n                                </Grid>\n                            </Grid>\n                            <Grid container sx={{ mt: 3, display: 'flex', justifyContent: 'center' }}>\n                                <Grid item xs=\"auto\">\n                                    <Typography variant=\"h4\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                        SHARESBONUS:\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs=\"auto\">\n                                    <Typography variant=\"h4\" sx={{ ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                        {sharesBalance}\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs=\"auto\" sx={{ ml: 0.7, mt: -0.3 }}>\n                                    <Tooltip\n                                        sx={{ color: theme.palette.success.main }}\n                                        title={\n                                            <Typography\n                                                sx={{\n                                                    color: theme.palette.success.main\n                                                }}\n                                            >\n                                                SHARESBONUS - shows your current sSTX balance. Each sSTX in your wallet, increases your APY\n                                                by 5%. An user may hold unlimited amount of sSTX but the SHARESBONUS is limited to 20.\n                                                Therefore, we can say the maximum APY is 108% (20 * 5% + 8%).\n                                            </Typography>\n                                        }\n                                    >\n                                        <InfoIcon />\n                                    </Tooltip>\n                                </Grid>\n                            </Grid>\n                            <Grid container sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\n                                <Grid item xs=\"auto\">\n                                    <Typography variant=\"h4\" sx={{ mt: 1 }} color={theme.palette.grey[50]} textAlign=\"center\">\n                                        INITIAL APY:\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs=\"auto\">\n                                    <Typography variant=\"h4\" sx={{ mt: 1, ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                        9.13%\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs=\"auto\" sx={{ ml: 0.7, my: 0.9 }}>\n                                    <Tooltip\n                                        sx={{ color: theme.palette.success.main }}\n                                        title={\n                                            <Typography\n                                                sx={{\n                                                    color: theme.palette.success.main\n                                                }}\n                                            >\n                                                Initial APY - That is the minimum APY that a stake can get if there are no sSTX in the\n                                                wallet of the staker at that given moment.\n                                            </Typography>\n                                        }\n                                    >\n                                        <InfoIcon />\n                                    </Tooltip>\n                                </Grid>\n                            </Grid>\n                            <Grid container sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\n                                <Grid item xs=\"auto\">\n                                    <Typography variant=\"h4\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                        CURRENT APY:\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs=\"auto\">\n                                    <Typography variant=\"h4\" sx={{ ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                        {myAPY}%\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs=\"auto\" sx={{ ml: 0.7, mt: -0.3 }}>\n                                    <Tooltip\n                                        sx={{ color: theme.palette.success.main }}\n                                        title={\n                                            <Typography\n                                                sx={{\n                                                    color: theme.palette.success.main\n                                                }}\n                                            >\n                                                Current APY - shows your APY at the moment if you open a stake. It is calculated by the\n                                                following formula: SHARESBONUS * 5 + 8%. The APY is limited to 108% (20 SHARESBONUS).\n                                            </Typography>\n                                        }\n                                    >\n                                        <InfoIcon />\n                                    </Tooltip>\n                                </Grid>\n                            </Grid>\n                            <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                                <Grid\n                                    item\n                                    sx={{\n                                        backgroundColor: theme.palette.grey[900],\n                                        mt: 2,\n                                        mb: 3\n                                    }}\n                                    lg=\"auto\"\n                                >\n                                    <LoadingButton\n                                        loading={loading}\n                                        onClick={() => {\n                                            setStakeAmount(preAmount);\n                                            handleLoadingTrue();\n                                            handleOpen4();\n                                        }}\n                                        sx={{\n                                            fontSize: 18,\n                                            minHeight: 45,\n                                            minWidth: 140,\n                                            bgcolor: theme.palette.success.main,\n                                            backgroundColor: theme.palette.success.main,\n                                            color: theme.palette.grey[900]\n                                        }}\n                                    >\n                                        Stake\n                                    </LoadingButton>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Card>\n                </Grid>\n                <Grid item container lg={4} xs={12} sx={{ display: 'flex', justifyContent: 'center', mt: 6 }}>\n                    <Card\n                        sx={{\n                            borderLeft: 1,\n                            borderRight: 1,\n                            borderBottom: 3,\n                            borderColor: theme.palette.success.light,\n                            borderRadius: 5,\n                            boxShadow: '0px 10px 20px rgb(0, 230, 117)',\n                            mb: 1\n                        }}\n                    >\n                        <Grid\n                            container\n                            sx={{\n                                backgroundColor: theme.palette.grey[900],\n                                mt: 3,\n                                display: 'flex',\n                                justifyContent: 'center'\n                            }}\n                        >\n                            <Grid item xs=\"auto\">\n                                <Typography variant=\"h2\" sx={{ ml: 1 }} color={theme.palette.grey[50]} textAlign=\"center\">\n                                    APY /\n                                </Typography>\n                            </Grid>\n                            <Grid item xs=\"auto\">\n                                <Typography variant=\"h2\" sx={{ ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                    REWARDS RATE\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                        <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                            <Grid item xs={10}>\n                                <Typography variant=\"h5\" sx={{ my: 4 }} color={theme.palette.grey[50]} textAlign=\"center\">\n                                    When creating a stake, the contract will save the staker`s` sSTX balance as SHARESBONUS. 1 SHARESBONUS +\n                                    ~4.56% APY.\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                        <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                            <Grid item xs=\"auto\">\n                                <Typography variant=\"h3\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                    Initial APY:\n                                </Typography>\n                            </Grid>\n                            <Grid item xs=\"auto\">\n                                <Typography variant=\"h3\" sx={{ ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                    9.125%\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                        <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                            <Grid item xs=\"auto\">\n                                <Typography variant=\"h3\" sx={{ my: 4 }} color={theme.palette.grey[50]} textAlign=\"center\">\n                                    Current APY:\n                                </Typography>\n                            </Grid>\n                            <Grid item xs=\"auto\">\n                                <Typography variant=\"h3\" sx={{ my: 4, ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                    {myAPY}%\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                    </Card>\n                </Grid>\n            </Grid>\n            <Typography textAlign=\"center\" variant=\"h2\" sx={{ mt: 10 }}>\n                Regular Stakes\n            </Typography>\n            <Grid\n                item\n                lg={12}\n                xs={12}\n                sx={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    mt: 6,\n                    mb: 15,\n                    borderLeft: 1,\n                    borderRight: 1,\n                    borderBottom: 3,\n                    borderColor: theme.palette.success.light,\n                    borderRadius: 5,\n                    boxShadow: '0px 10px 20px rgb(0, 230, 117)'\n                }}\n            >\n                <TableContainer sx={{ width: 350, borderRadius: 5 }}>\n                    <Table sx={{ width: 'max-width' }} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                        NAME\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                        SHARESBONUS\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                        STAKED\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                        REWARDS\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Grid container>\n                                        <Grid item xs={6} sx={{ mt: 0.9 }}>\n                                            <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                                TUM\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <Tooltip\n                                                sx={{ mt: 0.6, color: theme.palette.success.main }}\n                                                title={\n                                                    <Typography\n                                                        sx={{\n                                                            color: theme.palette.success.main\n                                                        }}\n                                                    >\n                                                        TUM stands for Time Until Mature. Each stake will face heavy penalty (90% on the\n                                                        staked balane) if the stake is ended before the 45th day.\n                                                    </Typography>\n                                                }\n                                            >\n                                                <InfoIcon />\n                                            </Tooltip>\n                                        </Grid>\n                                    </Grid>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                        ACTIVITIES\n                                    </Typography>\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        {stakedd.map((total, index) => (\n                            <TableBody key={index}>\n                                <TableRow key={index} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\n                                    <TableCell>\n                                        <Typography key={index} textAlign=\"center\">\n                                            {total.stakename}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography key={index} textAlign=\"center\">\n                                            {total.sharesbonus} / {total.sharesbonus * 4.56 + 9.12}%\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography key={index} textAlign=\"center\">\n                                            {(total.amount / Number18Decimals).toLocaleString(undefined, {\n                                                maximumFractionDigits: 2\n                                            })}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography key={index} textAlign=\"center\">\n                                            {(total.claimable / Number18Decimals).toLocaleString(undefined, {\n                                                maximumFractionDigits: 2\n                                            })}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography key={index} textAlign=\"center\">\n                                            <SimpleDateTime dateSeparator=\"/\" format=\"MYD\" showTime=\"0\">\n                                                {total.since}\n                                            </SimpleDateTime>\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Grid item container xs={12} sx={{ width: 170 }}>\n                                            <LoadingButton\n                                                loading={loading3}\n                                                onClick={() => {\n                                                    setCurrentClaimable(total.claimable);\n                                                    setCurrentStaked(total.amount);\n                                                    handleLoadingTrue3();\n                                                    handleOpen();\n                                                    setCurrentIndex(index);\n                                                }}\n                                                sx={{\n                                                    fontSize: 15,\n                                                    width: 80,\n                                                    height: 23,\n                                                    color: theme.palette.grey[900],\n                                                    bgcolor: theme.palette.success.main,\n                                                    backgroundColor: theme.palette.success.main\n                                                }}\n                                            >\n                                                Withdraw\n                                            </LoadingButton>\n                                            <LoadingButton\n                                                loading={loading4}\n                                                onClick={() => {\n                                                    setCurrentClaimable(total.claimable);\n                                                    handleLoadingTrue4();\n                                                    handleOpen2();\n                                                    setCurrentIndex(index);\n                                                }}\n                                                sx={{\n                                                    ml: 1,\n                                                    fontSize: 15,\n                                                    width: 80,\n                                                    height: 23,\n                                                    color: theme.palette.grey[900],\n                                                    bgcolor: theme.palette.success.main,\n                                                    backgroundColor: theme.palette.success.main\n                                                }}\n                                            >\n                                                Claim\n                                            </LoadingButton>\n                                        </Grid>\n                                    </TableCell>\n                                </TableRow>\n                            </TableBody>\n                        ))}\n                    </Table>\n                </TableContainer>\n            </Grid>\n            <Typography textAlign=\"center\" variant=\"h2\" sx={{ mt: 10 }}>\n                Boosted Stakes\n            </Typography>\n            <Grid\n                item\n                lg={12}\n                xs={12}\n                sx={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    mt: 6,\n                    mb: 15,\n                    borderLeft: 1,\n                    borderRight: 1,\n                    borderBottom: 3,\n                    borderColor: theme.palette.success.light,\n                    borderRadius: 5,\n                    boxShadow: '0px 10px 20px rgb(0, 230, 117)'\n                }}\n            >\n                <TableContainer sx={{ width: 350, borderRadius: 5 }}>\n                    <Table sx={{ width: 'max-width' }} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                        NAME\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                        SHARESBONUS\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                        STAKED\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                        REWARDS\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Grid container>\n                                        <Grid item xs={6} sx={{ mt: 0.9 }}>\n                                            <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                                TUM\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <Tooltip\n                                                sx={{ mt: 0.6, color: theme.palette.success.main }}\n                                                title={\n                                                    <Typography\n                                                        sx={{\n                                                            color: theme.palette.success.main\n                                                        }}\n                                                    >\n                                                        TUM stands for Time Until Mature. Each stake will face heavy penalty (90% on the\n                                                        staked balane) if the stake is ended before the 45th day.\n                                                    </Typography>\n                                                }\n                                            >\n                                                <InfoIcon />\n                                            </Tooltip>\n                                        </Grid>\n                                    </Grid>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                        ACTIVITIES\n                                    </Typography>\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        {stakedd.map((total, index) => (\n                            <TableBody key={index}>\n                                <TableRow key={index} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\n                                    <TableCell>\n                                        <Typography key={index} textAlign=\"center\">\n                                            {total.stakename}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography key={index} textAlign=\"center\">\n                                            {total.sharesbonus} / {total.sharesbonus * 4.56 + 9.12}%\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography key={index} textAlign=\"center\">\n                                            {(total.amount / Number18Decimals).toLocaleString(undefined, {\n                                                maximumFractionDigits: 2\n                                            })}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography key={index} textAlign=\"center\">\n                                            {(total.claimable / Number18Decimals).toLocaleString(undefined, {\n                                                maximumFractionDigits: 2\n                                            })}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography key={index} textAlign=\"center\">\n                                            <SimpleDateTime dateSeparator=\"/\" format=\"MYD\" showTime=\"0\">\n                                                {total.since}\n                                            </SimpleDateTime>\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Grid item container xs={12} sx={{ width: 170 }}>\n                                            <LoadingButton\n                                                loading={loading3}\n                                                onClick={() => {\n                                                    setCurrentClaimable(total.claimable);\n                                                    setCurrentStaked(total.amount);\n                                                    handleLoadingTrue3();\n                                                    handleOpen();\n                                                    setCurrentIndex(index);\n                                                }}\n                                                sx={{\n                                                    fontSize: 15,\n                                                    width: 80,\n                                                    height: 23,\n                                                    color: theme.palette.grey[900],\n                                                    bgcolor: theme.palette.success.main,\n                                                    backgroundColor: theme.palette.success.main\n                                                }}\n                                            >\n                                                Withdraw\n                                            </LoadingButton>\n                                            <LoadingButton\n                                                loading={loading4}\n                                                onClick={() => {\n                                                    setCurrentClaimable(total.claimable);\n                                                    handleLoadingTrue4();\n                                                    handleOpen2();\n                                                    setCurrentIndex(index);\n                                                }}\n                                                sx={{\n                                                    ml: 1,\n                                                    fontSize: 15,\n                                                    width: 80,\n                                                    height: 23,\n                                                    color: theme.palette.grey[900],\n                                                    bgcolor: theme.palette.success.main,\n                                                    backgroundColor: theme.palette.success.main\n                                                }}\n                                            >\n                                                Claim\n                                            </LoadingButton>\n                                        </Grid>\n                                    </TableCell>\n                                </TableRow>\n                            </TableBody>\n                        ))}\n                    </Table>\n                </TableContainer>\n            </Grid>\n        </>\n    );\n};\n\nexport default StakingCard;\n","import { Grid } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n// project imports\nimport { gridSpacing } from 'store/constant';\nimport StakingCard from './StakingCard';\n// ==============================|| TYPOGRAPHY ||============================== //\n\nconst Typography = () => {\n    useTheme();\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item lg={12}>\n                <StakingCard />\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default Typography;\n"],"sourceRoot":""}