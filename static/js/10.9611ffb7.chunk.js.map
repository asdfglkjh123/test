{"version":3,"sources":["assets/StaxLogoOnly.png","views/utilities/staxlogo.js","views/utilities/StakingCard.js","views/utilities/Typography.js"],"names":["StaxLogo","useTheme","justifyContent","alignContent","sx","height","width","src","Stax","alt","style","position","top","left","transform","bgcolor","border","boxShadow","borderRadius","borderColor","p","StakingCard","theme","useState","balance","setBalance","balanceFormatted","BigNumber","decimalPlaces","toLocaleString","undefined","preAmount","setPreAmount","stakeAmount","setStakeAmount","stakeAmountF","Web3","utils","toWei","toString","stakeAmountFormatted","toBN","stakeName","setStakeName","Number18Decimals","sharesBalance","setSharesBalance","stakesList","setStakesList","currentClaimable","setCurrentClaimable","currentStaked","setCurrentStaked","withdrawSum","setWithdrawSum","withdrawSumFormatted","withdrawAFormatted","stakedd","React","loading","setLoading","loading2","setLoading2","loading3","setLoading3","loading4","setLoading4","loading5","setLoading5","open","setOpen","open2","setOpen2","open3","setOpen3","open4","setOpen4","handleClose2","handleClose3","handleClose4","handleLoadingFalse5","handleLoadingTrue5","currentIndex","setCurrentIndex","myAPY","fetchStaxBalance","a","ggetStaxBalance","then","catch","err","console","log","fetchStakesBalance","stakeHas","balancee","fetchSharesBalance","ggetOwnBalance","useEffect","load","Modal","onClose","Box","variant","textAlign","component","Grid","item","container","mt","mb","display","maximumFractionDigits","ml","TextField","required","borderBottom","palette","success","main","onChange","e","target","value","inputProps","color","id","label","LoadingButton","onClick","withdrawAmount","fontSize","grey","backgroundColor","stakeStax","minHeight","minWidth","onBackdropClick","my","Button","spacing","xs","lg","md","sm","Divider","Card","maxWidth","borderLeft","borderRight","light","pt","Tooltip","title","TableContainer","Table","TableHead","TableRow","TableCell","map","total","index","TableBody","stakename","sharesbonus","amount","claimable","dateSeparator","format","showTime","since","Typography","gridSpacing"],"mappings":"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","file":"static/js/10.9611ffb7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/StaxLogoOnly.17f6a5b9.png\";","// project imports\nimport Stax from '../../assets/StaxLogoOnly.png';\nimport { Grid } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nconst StaxLogo = () => {\n    useTheme();\n    return (\n        <>\n            <Grid justifyContent=\"center\" alignContent=\"center\" sx={{ height: 100 }}>\n                <img height={80} width=\"height\" src={Stax} alt=\"shares banner\" />\n            </Grid>\n        </>\n    );\n};\n\nexport default StaxLogo;\n","import React, { useState, useEffect } from 'react';\n\n// material-ui\nimport SimpleDateTime from 'react-simple-timestamp-to-date';\nimport { useTheme } from '@mui/material/styles';\nimport {\n    Button,\n    Box,\n    Card,\n    Divider,\n    Grid,\n    Table,\n    TableContainer,\n    TextField,\n    Tooltip,\n    TableHead,\n    Typography,\n    TableBody,\n    TableRow,\n    TableCell,\n    Modal\n} from '@mui/material';\n// project imports\nimport StaxLogo from './staxlogo';\nimport DoneIcon from '@mui/icons-material/Done';\nimport InfoIcon from '@mui/icons-material/Info';\nimport { ggetStaxBalance, withdrawAmount, ggetOwnBalance, stakeStax, stakeHas } from 'components/wallet/sharesABI';\nimport BigNumber from 'bignumber.js';\nimport Web3 from 'web3';\nimport { LoadingButton } from '@mui/lab';\n// ==============================|| DASHBOARD DEFAULT - POPULAR CARD ||============================== //\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 300,\n    bgcolor: 'background.paper',\n    border: '2px solid #000000',\n    boxShadow: 24,\n    borderRadius: 7,\n    borderColor: 'black',\n    p: 3\n};\nconst StakingCard = () => {\n    const theme = useTheme();\n    const [balance, setBalance] = useState(0);\n    const balanceToNumber = new BigNumber(balance);\n    const balanceFormat = balanceToNumber.decimalPlaces(2);\n    const balanceFormatted = balanceFormat.toLocaleString(undefined);\n    const [preAmount, setPreAmount] = useState(0);\n    const [stakeAmount, setStakeAmount] = useState(0);\n    const stakeAmountF = Web3.utils.toWei(stakeAmount.toString(), 'ether');\n    const stakeAmountFormatted = Web3.utils.toBN(stakeAmountF);\n    const [stakeName, setStakeName] = useState(0);\n    const Number18Decimals = 1000000000000000000;\n    const [sharesBalance, setSharesBalance] = useState(0);\n    const [stakesList, setStakesList] = useState([[], []]);\n    const [currentClaimable, setCurrentClaimable] = useState(0);\n    const [currentStaked, setCurrentStaked] = useState(0);\n    const [withdrawSum, setWithdrawSum] = useState(0);\n    const withdrawSumFormatted = Web3.utils.toWei(withdrawSum.toString(), 'ether');\n    const withdrawAFormatted = Web3.utils.toBN(withdrawSumFormatted);\n    const [staked, stakedd] = stakesList;\n    // POP - UPS\n    const [loading, setLoading] = React.useState(false);\n    const [loading2, setLoading2] = React.useState(false);\n    const [loading3, setLoading3] = React.useState(false);\n    const [loading4, setLoading4] = React.useState(false);\n    const [loading5, setLoading5] = React.useState(false);\n    const [open, setOpen] = React.useState(false);\n    const [open2, setOpen2] = React.useState(false);\n    const [open3, setOpen3] = React.useState(false);\n    const [open4, setOpen4] = React.useState(false);\n    const handleClose = () => setOpen(false);\n    const handleOpen = () => setOpen(true);\n    const handleClose2 = () => setOpen3(false);\n    const handleOpen2 = () => setOpen2(true);\n    const handleClose3 = () => setOpen3(false);\n    const handleOpen3 = () => setOpen3(true);\n    const handleClose4 = () => setOpen4(false);\n    const handleOpen4 = () => setOpen4(true);\n    const handleLoadingFalse = () => setLoading(false);\n    const handleLoadingTrue = () => setLoading(true);\n    const handleLoadingFalse2 = () => setLoading2(false);\n    const handleLoadingTrue2 = () => setLoading2(true);\n    const handleLoadingFalse3 = () => setLoading3(false);\n    const handleLoadingTrue3 = () => setLoading3(true);\n    const handleLoadingFalse4 = () => setLoading4(false);\n    const handleLoadingTrue4 = () => setLoading4(true);\n    const handleLoadingFalse5 = () => setLoading5(false);\n    const handleLoadingTrue5 = () => setLoading5(true);\n    const updateStakeAmount = (event, newValue) => {\n        setStakeAmount(newValue);\n    };\n    //  WITHDRAWING INDEX\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const myAPY = 9.125 + sharesBalance * 4.5625;\n    //  FETCHING BLOCKCHAIN DATA\n    const fetchStaxBalance = async () => {\n        ggetStaxBalance()\n            .then((balance) => {\n                setBalance(balance);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n    const fetchStakesBalance = async () => {\n        stakeHas(true)\n            .then((balancee) => {\n                setStakesList(balancee);\n                console.log(balancee);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n    const fetchSharesBalance = async () => {\n        ggetOwnBalance()\n            .then((balance) => {\n                if (balance > 20) {\n                    setSharesBalance(20);\n                } else {\n                    setSharesBalance(balance);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n    useEffect(() => {\n        async function load() {\n            fetchStaxBalance();\n            stakeHas();\n            fetchSharesBalance();\n            fetchStakesBalance();\n        }\n        load();\n    }, []);\n    return (\n        <>\n            <Modal open={open} onClose={handleClose} aria-labelledby=\"modal-modal-title\" aria-describedby=\"modal-modal-description\">\n                <Box sx={style}>\n                    <Typography variant=\"h5\" textAlign=\"center\" component=\"h2\">\n                        Important: 90% penalty is applied to the `withdraw amount` to all pre-mature stakes.\n                    </Typography>\n                    <Grid item container sx={{ mt: 2, mb: 1, display: 'flex', justifyContent: 'center' }}>\n                        <Typography variant=\"h5\" textAlign=\"center\" component=\"h2\">\n                            Rewards:{' '}\n                            {(currentClaimable / Number18Decimals).toLocaleString(undefined, {\n                                maximumFractionDigits: 2\n                            })}\n                        </Typography>\n                        <Typography variant=\"h5\" textAlign=\"center\" sx={{ ml: 2 }} component=\"h2\">\n                            Staked:{' '}\n                            {(currentStaked / Number18Decimals).toLocaleString(undefined, {\n                                maximumFractionDigits: 2\n                            })}\n                        </Typography>\n                    </Grid>\n                    <Grid item sx={{ justifyContent: 'center', display: 'flex' }}>\n                        <TextField\n                            required\n                            sx={{ borderBottom: 2, borderColor: theme.palette.success.main }}\n                            onChange={(e) => setWithdrawSum(e.target.value)}\n                            inputProps={{ style: { width: 120, textAlign: 'center', color: 'white' } }}\n                            id=\"standard-basic\"\n                            label=\"Withdraw amount\"\n                            variant=\"standard\"\n                            color=\"success\"\n                        />\n                    </Grid>\n                    <Grid item sx={{ justifyContent: 'center', display: 'flex' }}>\n                        <LoadingButton\n                            loading={loading5}\n                            onClick={() => {\n                                handleLoadingTrue5();\n                                withdrawAmount(withdrawAFormatted, currentIndex).then(() => {\n                                    handleLoadingFalse5();\n                                    setOpen(false);\n                                    setOpen3(true);\n                                    handleLoadingFalse3();\n                                    fetchStakesBalance();\n                                });\n                            }}\n                            sx={{\n                                mt: 2.5,\n                                fontSize: 15,\n                                width: 80,\n                                height: 30,\n                                color: theme.palette.grey[900],\n                                bgcolor: theme.palette.success.main,\n                                backgroundColor: theme.palette.success.main\n                            }}\n                        >\n                            Withdraw\n                        </LoadingButton>\n                    </Grid>\n                </Box>\n            </Modal>\n            <Modal open={open4} onClose={handleClose4} aria-labelledby=\"modal-modal-title\" aria-describedby=\"modal-modal-description\">\n                <Box sx={style}>\n                    <Typography variant=\"h5\" textAlign=\"center\" component=\"h2\">\n                        Important: Your stake will be in `pre-mature` phase for the first 45 days and will face heavy penatlies in case of\n                        any withdraws / claims (90% fee on the staked, 5% on the rewards and minus 1 SHARESBONUS per Transaction).\n                    </Typography>\n                    <Grid item sx={{ display: 'flex', justifyContent: 'center' }}>\n                        <LoadingButton\n                            loading={loading2}\n                            onClick={() => {\n                                handleLoadingTrue2();\n                                stakeStax(stakeAmountFormatted, stakeName).then(() => {\n                                    handleClose4();\n                                    handleOpen3();\n                                    handleLoadingFalse2();\n                                    handleLoadingFalse();\n                                    fetchStakesBalance();\n                                    fetchStaxBalance();\n                                });\n                            }}\n                            sx={{\n                                fontSize: 18,\n                                minHeight: 45,\n                                minWidth: 140,\n                                mt: 3,\n                                bgcolor: theme.palette.success.main,\n                                backgroundColor: theme.palette.success.main,\n                                color: theme.palette.grey[900]\n                            }}\n                        >\n                            Stake\n                        </LoadingButton>\n                    </Grid>\n                </Box>\n            </Modal>\n            <Modal\n                open={open2}\n                onClose={handleClose2}\n                onBackdropClick={handleClose2}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <Box sx={style}>\n                    <Typography variant=\"h5\" textAlign=\"center\" component=\"h2\">\n                        Important: Each claim reduces the SHARESBONUS by 1. Therefore, the stake APR will be reduced by ~4,56% on each\n                        claim/withdraw.\n                    </Typography>\n                    <Grid item sx={{ display: 'flex', my: 2, justifyContent: 'center' }}>\n                        <Typography variant=\"h5\" textAlign=\"center\" component=\"h2\" key={currentIndex}>\n                            Amount to be claimed:{' '}\n                            {(currentClaimable / Number18Decimals).toLocaleString(undefined, {\n                                maximumFractionDigits: 2\n                            })}\n                        </Typography>\n                    </Grid>\n                    <Grid item sx={{ display: 'flex', justifyContent: 'center' }}>\n                        <LoadingButton\n                            loading={loading5}\n                            onClick={() => {\n                                handleLoadingTrue5();\n                                withdrawAmount(0, currentIndex).then(() => {\n                                    handleLoadingFalse5();\n                                    setOpen2(false);\n                                    setOpen3(true);\n                                    handleLoadingFalse4();\n                                    fetchStakesBalance();\n                                });\n                            }}\n                            sx={{\n                                mt: 1,\n                                fontSize: 18,\n                                minHeight: 35,\n                                minWidth: 110,\n                                bgcolor: theme.palette.success.main,\n                                backgroundColor: theme.palette.success.main,\n                                color: theme.palette.grey[900]\n                            }}\n                        >\n                            Claim\n                        </LoadingButton>\n                    </Grid>\n                </Box>\n            </Modal>\n            <Modal open={open3} onClose={handleClose3} aria-labelledby=\"modal-modal-title\" aria-describedby=\"modal-modal-description\">\n                <Box sx={style}>\n                    <Grid item sx={{ display: 'flex', justifyContent: 'center' }}>\n                        <DoneIcon color=\"success\" fontSize=\"large\" />\n                    </Grid>\n                    <Typography variant=\"h5\" textAlign=\"center\" sx={{ mt: 3 }} component=\"h2\">\n                        Transaction completed.\n                    </Typography>\n                    <Grid item sx={{ display: 'flex', justifyContent: 'center' }}>\n                        <Button\n                            onClick={handleClose3}\n                            sx={{\n                                mt: 2,\n                                fontSize: 18,\n                                minHeight: 45,\n                                minWidth: 140,\n                                bgcolor: theme.palette.success.main,\n                                backgroundColor: theme.palette.success.main,\n                                color: theme.palette.grey[900]\n                            }}\n                        >\n                            Close\n                        </Button>\n                    </Grid>\n                </Box>\n            </Modal>\n            <Grid item container spacing={2} xs={12} sx={{ display: 'flex', justifyContent: 'center' }}>\n                <Grid item lg={12} xs={12} md={12} sm={12}>\n                    <Typography textAlign=\"center\" variant=\"h1\" color={theme.palette.grey[50]}>\n                        Staking\n                    </Typography>\n                    <Divider />\n                </Grid>\n                <Grid item container lg={4} xs={12} sx={{ display: 'flex', justifyContent: 'center', mt: 6 }}>\n                    <Card\n                        sx={{\n                            maxWidth: 1900,\n                            borderLeft: 1,\n                            borderRight: 1,\n                            borderBottom: 3,\n                            borderColor: theme.palette.success.light,\n                            borderRadius: 5,\n                            boxShadow: '0px 10px 20px rgb(0, 230, 117)'\n                        }}\n                    >\n                        <Grid container sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\n                            <Grid item sx={{ backgroundColor: theme.palette.grey[900], mt: 2 }} lg={3.6} xs=\"auto\">\n                                <StaxLogo />\n                            </Grid>\n                            <Grid item lg=\"auto\" xs=\"auto\" sx={{ ml: 0.8, mt: 5 }}>\n                                <Typography variant=\"h2\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                    Stake\n                                </Typography>\n                            </Grid>\n                            <Grid item lg=\"auto\" xs=\"auto\">\n                                <Typography variant=\"h2\" sx={{ ml: 0.7, mt: 5 }} color={theme.palette.success.main} textAlign=\"center\">\n                                    STAX\n                                </Typography>\n                            </Grid>\n                            <Grid item lg={1} xs=\"auto\" sx={{ mt: 5, pt: 0.2 }}>\n                                <Tooltip\n                                    sx={{ color: theme.palette.success.main }}\n                                    title={\n                                        <Typography\n                                            sx={{\n                                                color: theme.palette.success.main\n                                            }}\n                                        >\n                                            Stakes have name, staked amount and SHARESBONUS. Users choose the name and tokens to be staked.\n                                            When creating a stake, the smart contract will get the user`s current sSTX balance and save it\n                                            as SHARESBONUS in the stake`s properties.\n                                        </Typography>\n                                    }\n                                >\n                                    <InfoIcon />\n                                </Tooltip>\n                            </Grid>\n                            <Grid container sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\n                                <Grid\n                                    item\n                                    sx={{ justifyContent: 'center', backgroundColor: theme.palette.grey[900], my: 1 }}\n                                    lg=\"auto\"\n                                    md=\"auto\"\n                                    xs=\"auto\"\n                                >\n                                    <Typography variant=\"h4\" textAlign=\"center\">\n                                        NAME:\n                                    </Typography>\n                                </Grid>\n                                <Grid item sx={{ backgroundColor: theme.palette.grey[900] }} lg=\"auto\">\n                                    <TextField\n                                        required\n                                        sx={{ borderBottom: 2, borderColor: theme.palette.success.main }}\n                                        onChange={(e) => setStakeName(e.target.value)}\n                                        inputProps={{ style: { width: 110, textAlign: 'center', color: 'white' } }}\n                                        id=\"standard-basic\"\n                                        variant=\"standard\"\n                                        color=\"success\"\n                                    />\n                                    <Typography variant=\"h5\" textAlign=\"left\">\n                                        Enter stake name\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                            <Grid container sx={{ mt: 3, display: 'flex', justifyContent: 'center' }}>\n                                <Grid\n                                    item\n                                    sx={{ justifyContent: 'center', backgroundColor: theme.palette.grey[900], my: 1 }}\n                                    lg=\"auto\"\n                                    md=\"auto\"\n                                    xs=\"auto\"\n                                >\n                                    <Typography variant=\"h4\" textAlign=\"center\">\n                                        AMOUNT:\n                                    </Typography>\n                                </Grid>\n                                <Grid item sx={{ backgroundColor: theme.palette.grey[900] }} lg=\"auto\">\n                                    <TextField\n                                        sx={{ borderBottom: 2, borderColor: theme.palette.success.main }}\n                                        onChange={(e) => setPreAmount(e.target.value)}\n                                        inputProps={{ style: { width: 110, textAlign: 'center', color: 'white' } }}\n                                        id=\"standard-basic\"\n                                        variant=\"standard\"\n                                        color=\"success\"\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'center' }}>\n                                    <Typography variant=\"h5\" textAlign=\"left\">\n                                        Balance: {balanceFormatted} STAX\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                            <Grid container sx={{ mt: 3, display: 'flex', justifyContent: 'center' }}>\n                                <Grid item xs=\"auto\">\n                                    <Typography variant=\"h4\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                        SHARESBONUS:\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs=\"auto\">\n                                    <Typography variant=\"h4\" sx={{ ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                        {sharesBalance}\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs=\"auto\" sx={{ ml: 0.7, mt: -0.3 }}>\n                                    <Tooltip\n                                        sx={{ color: theme.palette.success.main }}\n                                        title={\n                                            <Typography\n                                                sx={{\n                                                    color: theme.palette.success.main\n                                                }}\n                                            >\n                                                SHARESBONUS - shows your current sSTX balance. Each sSTX in your wallet, increases your APY\n                                                by 5%. An user may hold unlimited amount of sSTX but the SHARESBONUS is limited to 20.\n                                                Therefore, we can say the maximum APY is 108% (20 * 5% + 8%).\n                                            </Typography>\n                                        }\n                                    >\n                                        <InfoIcon />\n                                    </Tooltip>\n                                </Grid>\n                            </Grid>\n                            <Grid container sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\n                                <Grid item xs=\"auto\">\n                                    <Typography variant=\"h4\" sx={{ mt: 1 }} color={theme.palette.grey[50]} textAlign=\"center\">\n                                        INITIAL APY:\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs=\"auto\">\n                                    <Typography variant=\"h4\" sx={{ mt: 1, ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                        9.13%\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs=\"auto\" sx={{ ml: 0.7, my: 0.9 }}>\n                                    <Tooltip\n                                        sx={{ color: theme.palette.success.main }}\n                                        title={\n                                            <Typography\n                                                sx={{\n                                                    color: theme.palette.success.main\n                                                }}\n                                            >\n                                                Initial APY - That is the minimum APY that a stake can get if there are no sSTX in the\n                                                wallet of the staker at that given moment.\n                                            </Typography>\n                                        }\n                                    >\n                                        <InfoIcon />\n                                    </Tooltip>\n                                </Grid>\n                            </Grid>\n                            <Grid container sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\n                                <Grid item xs=\"auto\">\n                                    <Typography variant=\"h4\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                        CURRENT APY:\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs=\"auto\">\n                                    <Typography variant=\"h4\" sx={{ ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                        {myAPY}%\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs=\"auto\" sx={{ ml: 0.7, mt: -0.3 }}>\n                                    <Tooltip\n                                        sx={{ color: theme.palette.success.main }}\n                                        title={\n                                            <Typography\n                                                sx={{\n                                                    color: theme.palette.success.main\n                                                }}\n                                            >\n                                                Current APY - shows your APY at the moment if you open a stake. It is calculated by the\n                                                following formula: SHARESBONUS * 5 + 8%. The APY is limited to 108% (20 SHARESBONUS).\n                                            </Typography>\n                                        }\n                                    >\n                                        <InfoIcon />\n                                    </Tooltip>\n                                </Grid>\n                            </Grid>\n                            <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                                <Grid\n                                    item\n                                    sx={{\n                                        backgroundColor: theme.palette.grey[900],\n                                        mt: 2,\n                                        mb: 3\n                                    }}\n                                    lg=\"auto\"\n                                >\n                                    <LoadingButton\n                                        loading={loading}\n                                        onClick={() => {\n                                            setStakeAmount(preAmount);\n                                            handleLoadingTrue();\n                                            handleOpen4();\n                                        }}\n                                        sx={{\n                                            fontSize: 18,\n                                            minHeight: 45,\n                                            minWidth: 140,\n                                            bgcolor: theme.palette.success.main,\n                                            backgroundColor: theme.palette.success.main,\n                                            color: theme.palette.grey[900]\n                                        }}\n                                    >\n                                        Stake\n                                    </LoadingButton>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Card>\n                </Grid>\n                <Grid item container lg={4} xs={12} sx={{ display: 'flex', justifyContent: 'center', mt: 6 }}>\n                    <Card\n                        sx={{\n                            borderLeft: 1,\n                            borderRight: 1,\n                            borderBottom: 3,\n                            borderColor: theme.palette.success.light,\n                            borderRadius: 5,\n                            boxShadow: '0px 10px 20px rgb(0, 230, 117)',\n                            mb: 1\n                        }}\n                    >\n                        <Grid\n                            container\n                            sx={{\n                                backgroundColor: theme.palette.grey[900],\n                                mt: 3,\n                                display: 'flex',\n                                justifyContent: 'center'\n                            }}\n                        >\n                            <Grid item xs=\"auto\">\n                                <Typography variant=\"h2\" sx={{ ml: 1 }} color={theme.palette.grey[50]} textAlign=\"center\">\n                                    APY /\n                                </Typography>\n                            </Grid>\n                            <Grid item xs=\"auto\">\n                                <Typography variant=\"h2\" sx={{ ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                    REWARDS RATE\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                        <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                            <Grid item xs={10}>\n                                <Typography variant=\"h5\" sx={{ my: 4 }} color={theme.palette.grey[50]} textAlign=\"center\">\n                                    When creating a stake, the contract will save the staker`s` sSTX balance as SHARESBONUS. 1 SHARESBONUS +\n                                    ~4.56% APY.\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                        <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                            <Grid item xs=\"auto\">\n                                <Typography variant=\"h3\" color={theme.palette.grey[50]} textAlign=\"center\">\n                                    Initial APY:\n                                </Typography>\n                            </Grid>\n                            <Grid item xs=\"auto\">\n                                <Typography variant=\"h3\" sx={{ ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                    9.125%\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                        <Grid container sx={{ display: 'flex', justifyContent: 'center' }}>\n                            <Grid item xs=\"auto\">\n                                <Typography variant=\"h3\" sx={{ my: 4 }} color={theme.palette.grey[50]} textAlign=\"center\">\n                                    Current APY:\n                                </Typography>\n                            </Grid>\n                            <Grid item xs=\"auto\">\n                                <Typography variant=\"h3\" sx={{ my: 4, ml: 1 }} color={theme.palette.success.main} textAlign=\"center\">\n                                    {myAPY}%\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                    </Card>\n                </Grid>\n            </Grid>\n            <Grid\n                item\n                lg={12}\n                xs={12}\n                sx={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    mt: 6,\n                    mb: 15,\n                    borderLeft: 1,\n                    borderRight: 1,\n                    borderBottom: 3,\n                    borderColor: theme.palette.success.light,\n                    borderRadius: 5,\n                    boxShadow: '0px 10px 20px rgb(0, 230, 117)'\n                }}\n            >\n                <TableContainer sx={{ width: 350, borderRadius: 5 }}>\n                    <Table sx={{ width: 'max-width' }} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                        NAME\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                        SHARESBONUS\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                        STAKED\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                        REWARDS\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Grid container>\n                                        <Grid item xs={6} sx={{ mt: 0.9 }}>\n                                            <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                                TUM\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <Tooltip\n                                                sx={{ mt: 0.6, color: theme.palette.success.main }}\n                                                title={\n                                                    <Typography\n                                                        sx={{\n                                                            color: theme.palette.success.main\n                                                        }}\n                                                    >\n                                                        TUM stands for Time Until Mature. Each stake will face heavy penalty (90% on the\n                                                        staked balane) if the stake is ended before the 45th day.\n                                                    </Typography>\n                                                }\n                                            >\n                                                <InfoIcon />\n                                            </Tooltip>\n                                        </Grid>\n                                    </Grid>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography color={theme.palette.success.main} textAlign=\"center\">\n                                        ACTIVITIES\n                                    </Typography>\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        {stakedd.map((total, index) => (\n                            <TableBody key={index}>\n                                <TableRow key={index} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\n                                    <TableCell>\n                                        <Typography key={index} textAlign=\"center\">\n                                            {total.stakename}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography key={index} textAlign=\"center\">\n                                            {total.sharesbonus} / {total.sharesbonus * 4.56 + 9.12}%\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography key={index} textAlign=\"center\">\n                                            {(total.amount / Number18Decimals).toLocaleString(undefined, {\n                                                maximumFractionDigits: 2\n                                            })}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography key={index} textAlign=\"center\">\n                                            {(total.claimable / Number18Decimals).toLocaleString(undefined, {\n                                                maximumFractionDigits: 2\n                                            })}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography key={index} textAlign=\"center\">\n                                            <SimpleDateTime dateSeparator=\"/\" format=\"MYD\" showTime=\"0\">\n                                                {total.since}\n                                            </SimpleDateTime>\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Grid item container xs={12} sx={{ width: 170 }}>\n                                            <LoadingButton\n                                                loading={loading3}\n                                                onClick={() => {\n                                                    setCurrentClaimable(total.claimable);\n                                                    setCurrentStaked(total.amount);\n                                                    handleLoadingTrue3();\n                                                    handleOpen();\n                                                    setCurrentIndex(index);\n                                                }}\n                                                sx={{\n                                                    fontSize: 15,\n                                                    width: 80,\n                                                    height: 23,\n                                                    color: theme.palette.grey[900],\n                                                    bgcolor: theme.palette.success.main,\n                                                    backgroundColor: theme.palette.success.main\n                                                }}\n                                            >\n                                                Withdraw\n                                            </LoadingButton>\n                                            <LoadingButton\n                                                loading={loading4}\n                                                onClick={() => {\n                                                    setCurrentClaimable(total.claimable);\n                                                    handleLoadingTrue4();\n                                                    handleOpen2();\n                                                    setCurrentIndex(index);\n                                                }}\n                                                sx={{\n                                                    ml: 1,\n                                                    fontSize: 15,\n                                                    width: 80,\n                                                    height: 23,\n                                                    color: theme.palette.grey[900],\n                                                    bgcolor: theme.palette.success.main,\n                                                    backgroundColor: theme.palette.success.main\n                                                }}\n                                            >\n                                                Claim\n                                            </LoadingButton>\n                                        </Grid>\n                                    </TableCell>\n                                </TableRow>\n                            </TableBody>\n                        ))}\n                    </Table>\n                </TableContainer>\n            </Grid>\n        </>\n    );\n};\n\nexport default StakingCard;\n","import { Grid } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n// project imports\nimport { gridSpacing } from 'store/constant';\nimport StakingCard from './StakingCard';\n// ==============================|| TYPOGRAPHY ||============================== //\n\nconst Typography = () => {\n    useTheme();\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item lg={12}>\n                <StakingCard />\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default Typography;\n"],"sourceRoot":""}